<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Variablen und Ausdrücke</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="css/default.css" rel="stylesheet" type="text/css">
</head>

<body>
<h1>Variablen und Ausdrücke</h1>

<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#Variables">Variablen</a></li>
  <li><a href="#Expressions">Ausdrücke</a></li>
  <li><a href="#Operators">Operatoren in Ausdrücken</a><a href="#env"></a></li>
  <li><a href="#BuiltIn">Interne Variablen</a></li>
  <li><a href="#env">Umgebungsvariablen vs. normale Variablen</a></li>
  <li><a href="#cap">Kapazität und Speicher einer Variable</a></li>
</ul>
<h2 id="Intro"><a name="Variables"></a>Variablen</h2>
<p id="Variable_types"><strong>Variablentypen</strong>: AutoHotkey besitzt keine direkt definierten Variablentypen. Instead, any variable can contain a string, integer, floating-point number, or reference to an object. Additionally, numbers are automatically converted to or from strings as required. The <a href="commands/Type.htm">Type</a> function can be used to determine the actual type of a value.</p>
<p id="Variable_scope"><strong>Gültigkeitsbereiche und Deklarationen von Variablen</strong>: Mit Ausnahme von <a href="Functions.htm#Locals">lokalen Variablen</a> in Funktionen sind alle Variablen global; das heißt, dass deren Inhalte jederzeit vom Script gelesen oder geändert werden können. Außer den genannten Ausnahmen auf der <a href="Functions.htm#Global">Funktionsseite</a> müssen Variablen nicht deklariert werden; sie stehen zur Verfügung, sobald sie verwendet werden (zudem ist jede Variable anfangs leer).</p>
<p id="Variable_names"><strong>Variablennamen</strong>: Variablennamen unterscheiden nicht zwischen Groß- und Kleinschreibung (zum Beispiel ist <em>AktuellesDatum</em> das gleiche wie <em>aktuellesdatum</em>). Variable names may be up to 253 characters long and may consist of letters, numbers, underscore and non-ASCII characters. Variable names must not start with a digit.</p>
<p id="Reserved_words"><strong>Reserved words:</strong> <code>or</code>, <code>and</code>, <code>not</code>, <code>is</code>, <code>in</code> and <code>contains</code>. These words are reserved for use as <a href="#Operators">operators</a> and therefore cannot be used as variable names when written literally in an expression.</p>
<p><strong>Werte in Variablen speichern</strong>: To store a string or number in a variable, use the <a href="commands/SetExpression.htm">colon-equal operator (:=)</a> followed by a number, quoted string or any other type of <a href="#Expressions">expression</a>. Zum Beispiel:</p>
<pre>MyNumber := 123
MyString := "This is a literal string."
CopyOfVar := Var</pre>
<p>Variables which have not been assigned a value contain an empty string by default. Therefore, to erase the contents of a variable, simply assign an empty string:</p>
<pre>MyVar := ""</pre>
<p>A variable can also be assigned a value indirectly, by using it as an <em>output variable</em> of a command. Zum Beispiel:</p>
<pre><a href="commands/WinGetTitle.htm">WinGetTitle</a> <strong>Title</strong>, A</pre>
<p><strong>Die Inhalte von Variablen abrufen</strong>: To include the contents of a variable in a string, enclose the variable name in percent signs. Zum Beispiel:</p>
<pre><a href="commands/MsgBox.htm">MsgBox</a>, The value in the variable named Var is %Var%.
MsgBox("The value in the variable named Var is %Var%.")
</pre>
<p>By contrast, the percent signs are omitted for variable references in an expression (other than in a quoted string). Zum Beispiel:</p>
<pre>MsgBox("The sum of X and Y is " . (X + Y))  <em>; A period is used to concatenate (join) two strings.</em>
</pre>
<p><strong>Vergleich von Variablen</strong>: Please read the expressions section below for important notes about the different kinds of comparisons.</p>
<h2 id="Expressions">Ausdrücke</h2>
<p>Ausdrücke werden verwendet, um eine oder mehrere Operationen an Variablen, direkte Strings und/oder direkte Zahlen durchzuführen.</p>
<p>Variablennamen werden in einem Ausdruck nicht in Prozentzeichen gesetzt (außer bei <a href="#ref">Pseudo-Arrays</a> und anderen <a href="misc/Arrays.htm#pseudo">Doppelverweisen</a>). Folglich müssen Strings in Anführungszeichen gesetzt werden, um sie von Variablen zu unterscheiden. Zum Beispiel:</p>
<pre>if (AktuelleEinstellung &gt; 100 or Fundfarbe &lt;&gt; "Blau")
    MsgBox Die Einstellung ist zu hoch oder falsche Farbe vorhanden.</pre>
<p>Im obigen Beispiel ist "Blau" in Anführungszeichen gesetzt, weil es ein direkter String ist. Single-quote marks (&amp;apos;) and double-quote marks (") function identically, except that a string enclosed in single-quote marks can contain literal double-quote marks and vice versa. Therefore, to include an <em>actual</em> quote mark inside a literal string, <a href="misc/EscapeChar.htm">escape</a> the quote mark or enclose the string in the opposite type of quote mark. Zum Beispiel:</p>
<pre>MsgBox % "She said, <span class="red">`"</span>An apple a day.<span class="red">`"</span>"
MsgBox % <span class="red">&amp;apos;</span>She said, "An apple a day."<span class="red">&amp;apos;</span></pre>
<p><strong>Leere Strings</strong>: Mithilfe von zwei aufeinanderfolgenden Anführungszeichen kann ein leerer String in einem Ausdruck angegeben werden. Zum Beispiel wird die Anweisung <code>if (EigeneVar &lt;&gt; "")</code> als wahr gewertet, wenn <em>EigeneVar</em> nicht leer ist.</p>
<p><strong>Das Ergebnis eines Ausdrucks speichern</strong>: Mit dem <a href="commands/SetExpression.htm">Operator ":="</a> kann ein Ausdrucksergebnis in eine Variable gespeichert werden. Zum Beispiel:</p>
<pre>Nettopreis := Preis * (1 - Rabatt/100)</pre>
<p id="Boolean"><strong>Boolesche Werte</strong>: Bei einem Ausdruck, das als wahr oder falsch gewertet werden muss (wie z. B. eine IF-Anweisung), wird ein Ergebnis, das leer oder 0 ist, als falsch angesehen, alle anderen Ergebnisse als wahr. Zum Beispiel ist die Anweisung <code>if Elementzählung</code> nur dann falsch, wenn Elementzählung leer oder 0 ist. Im Vergleich dazu würde der Ausdruck <code>if not Elementzählung</code> das gegenteilige Ergebnis zurückgeben.</p>
<p>Operators such as NOT/&gt;/=/&lt; automatically produce a true or false value: sie geben eine 1 für wahr und 0 für falsch zurück. However, the AND/OR operators always produce one of the input values. For example, in the following expression, the variable <em>Done</em> is assigned 1 if A_Index is greater than 5 or the value of <em>FoundIt</em> in all other cases:</p>
<pre>Fertig := A_Index &gt; 5 or Gefunden</pre>
<p>Wie oben angedeutet kann eine Variable dazu verwendet werden, einen falschen Wert zu beinhalten, indem sie einfach leer gemacht oder ihr eine 0 zugewiesen wird. Das bringt den Vorteil, dass mit der Kurzanweisung <code>if Fertig</code> überprüft werden kann, ob die Fertig-Variable wahr oder falsch ist.</p>
<p><a name="True"></a><a name="False"></a>In an expression, the keywords <em>true</em> and <em>false</em> resolve to 1 and 0. Sie können verwendet werden, um ein Script besser lesbar zu machen, z. B.:</p>
<pre>Zeichengenauigkeit := false
Suchfortsetzung := true</pre>
<p><strong>Integer und Fließkommazahlen</strong>: Within an expression, numbers are considered to be floating point if they contain a decimal point or scientific notation; otherwise, they are integers. Bei den meisten Operatoren (z. B. Addition und Multiplikation) wird das Ergebnis eine Fließkommazahl sein, sobald einer der Eingabewerte eine Fließkommazahl ist.</p>
<p>Innerhalb von Ausdrücken sowie auch Nicht-Ausdrücken können Zahlen entweder im hexadezimalen oder dezimalen Format geschrieben werden. Alle Hexadezimalzahlen beginnen mit dem 0x-Präfix. Zum Beispiel ist <code>Sleep 0xFF</code> das gleiche wie <code>Sleep 255</code>. Floating point numbers can optionally be written in scientific notation, with or without a decimal point (e.g. <code>1e4</code> or <code>-2.1E-4</code>).</p>
<p>Within expressions, unquoted literal numbers such as <code>128</code>, <code>0x7F</code> and <code>1.0</code> are converted to pure numbers before the script begins executing, so converting the number to a string may produce a value different to the original literal value. Zum Beispiel:</p>
<pre>MsgBox(0x7F)  <em>; Shows 128</em>
MsgBox(1.00)  <em>; Shows 1.0</em></pre>
<p id="Force_an_expression"><strong>Einen Ausdruck erzwingen</strong>: An expression can be used in a parameter that does not directly support it (except an OutputVar parameter) by preceding the expression with a percent sign and a space or tab. Zum Beispiel:</p>
<pre>
<a href="commands/MsgBox.htm">MsgBox</a> <strong>%</strong> "The variable MyVar contains " . MyVar . "."
<a href="commands/WinSet.htm">WinSet</a>, Transparent, <strong>%</strong> X + 100
<a href="commands/WinSet.htm">Control</a>, Choose, <strong>%</strong> CurrentSelection - 1</pre>
<p>An expression can also be inserted at any point in a string by enclosing it in percent signs, as in the following example:</p>
<pre>MsgBox, The time is %FormatTime(A_Now, "Time")%.</pre>
<p>OutputVar parameters also allow this, but the result of the expression should be the (full or partial) name of a variable, as a string.</p>

<h2 id="Operators">Operatoren in Ausdrücken</h2>
<p> Operatoren wie Multiplizieren (*) und Dividieren (/), die die gleiche Priorität haben, werden von links nach rechts ausgewertet, sofern nicht anders unten angegeben. Im Gegensatz dazu wird ein Operator wie Addieren (+), der eine niedrige Priorität hat, erst <em>nach</em> einem höheren Operator wie Multiplizieren (*) ausgewertet. Zum Beispiel wird 3 + 2 * 2 als 3 + (2 * 2) ausgewertet. Klammern können verwendet werden, um die Priorität wie in diesem Beispiel zu überschreiben: (3 + 2) * 2</p>
<p>Any blank value (empty string) involved in a math operation is <strong>not</strong> assumed to be zero. Stattdessen wird er als Fehler behandelt, wodurch dieser Teil des Ausdrucks als leerer String gewertet wird. Ist zum Beispiel bei dem Ausdruck X+1 die Variable X leer, wird ein leerer Wert zurückgegeben, anstatt eine 1.</p>
<h3>Ausdrucksoperatoren (in absteigender Priorität)</h3>
<table class="info">
  <tr id="ref">
    <td align="center" style="white-space:nowrap"><strong>%Var%</strong></td>
    <td><p>Sobald eine Variable innerhalb eines Ausdrucks von Prozentzeichen umschlossen ist (z. B. %Var%), wird davon ausgegangen, dass der <u>Inhalt</u> dieser Variable der Name oder Teilname einer anderen Variable ist (falls so eine Variable nicht vorhanden ist, wird %Var% in einen leeren String aufgelöst). Das wird häufig dazu verwendet, <a href="misc/Arrays.htm#pseudo">Pseudo-Array</a>-Elemente wie im folgenden Beispiel zu verweisen:</p>
      <pre>Var := EigenerArray%A_Index% + 100</pre>
    </td>
  </tr>
  <tr>
    <td align="center"><strong>x.y</strong></td>
    <td><strong>Object access</strong>. Get or set a value or call a method of object <i>x</i>, where <i>y</i> is a literal value. See <a href="Objects.htm#Usage_Objects">object syntax</a>.</td>
  </tr>
  <tr id="new">
    <td align="center"><strong>new</strong></td>
    <td><code>new <i>Class</i></code> or <code>new <i>Class</i>(<i>Params</i>)</code> creates a new object derived from <em>Class</em>. For example, <code>x := new y</code> is often equivalent to <code>x := {base: y}</code>. <em>Class</em> can be almost any expression which produces a class object, but is typically a class name such as <code>GlobalClass</code> or <code>GlobalClass.NestedClass</code>. More complex cases such as <code>new new (getClass())(params1)(params2)</code> are also supported, but there must be no space between the class expression and parameter list. For details, see <a href="Objects.htm#Custom_Objects">Custom Objects</a>.</td>
  </tr>
  <tr id="IncDec">
    <td align="center"><strong>++<br>
    
    --</strong></td>
    <td><strong>Pre- und Post-Inkrement/Dekrement</strong>. Adds or subtracts 1 from a variable. Der Operator kann entweder vor oder hinter dem Variablennamen stehen. Steht er <em>vor</em> dem Namen, wird die Operation sofort durchgeführt und das Ergebnis von der nächsten Operation verwendet. Zum Beispiel wird X bei <code>Var := ++X</code> sofort erhöht und danach in <em>Var</em> gespeichert. Steht der Operator hingegen <em>hinter</em> dem Variablennamen, wird die Operation durchgeführt, <em>nachdem</em> die Variable von der nächsten Operation verwendet wurde. Zum Beispiel wird X bei <code>Var := X++</code> erst nach Zuweisen des aktuellen Wertes von X in <em>Var</em> erhöht. Aufgrund der Abwärtskompatibilität behandeln die Operatoren ++ und -- leere Variablen als 0, aber nur, wenn sie alleine auf einer Zeile vorkommen; zum Beispiel erzeugt sowohl <code>y := 1, ++x</code> als auch <code>MsgBox % ++x</code> ein leeres Ergebnis, falls x leer ist.</td>
  </tr>
  <tr id="pow">
    <td align="center"><strong>**</strong></td>
    <td><strong>Potenz</strong>. Sowohl die Basis als auch der Exponent können einen Dezimalpunkt enthalten. Ist der Exponent negativ, wird das Ergebnis in eine Fließkommazahl umgewandelt, auch dann, wenn die Basis und der Exponent Integer sind. Da ** eine höhere Priorität als ein einstelliges Minuszeichen hat, wird <code>-2**2</code> wie <code>-(2**2)</code> ausgewertet und daher -4 zurückgeben. Um eine direkte negative Zahl folglich zu potenzieren, muss sie in Klammern wie <code>(-2)**2</code> gesetzt werden. Hinweis: Eine negative Basis, kombiniert mit einem gebrochenen Exponenten wie <code>(-2)**0.5</code>, wird nicht unterstützt; das Ergebnis ist ein leerer String. Allerdings wird sowohl <code>(-2)**2</code> als auch <code>(-2)**2.0<code> unterstützt.</td>
  </tr>
  <tr id="unary">
    <td align="center"><strong>-<br>
    
    !<br>
    
    ~<br>
    
    &amp; *</strong></td>
    <td><p><strong>Einstelliges Minuszeichen (-)</strong>: Auch wenn hier das gleiche Symbol vom Subtraktionsoperator verwendet wird, gilt ein einstelliges Minuszeichen nur für ein einzelnes Element oder Teilausdruck wie in diesem Beispiel zweimal gezeigt: <code><strong>-</strong>(3 / <strong>-</strong>x)</code>. Im Zusammenhang dazu wird jedes einstellige Pluszeichen (+) innerhalb eines Ausdrucks ignoriert.</p>
      <p><strong>Logisches NICHT (!)</strong>: Ist der Operand leer oder 0, wird das Ergebnis bei einem logischen NICHT eine 1 sein, also "wahr". Ansonsten ist das Ergebnis eine 0 (falsch). Zum Beispiel: <code>!x or !(y and z)</code>. Hinweis: Das Wort NOT ist das gleiche wie <strong>!</strong>, außer dass <strong>!</strong> eine höhere Priorität hat. Consecutive unary operators such as <code><strong>!!</strong>Var</code> are allowed because they are evaluated in right-to-left order.</p>
      <p><strong>Bitweises NICHT (~)</strong>: Invertiert jedes Bit des Operanden. Ist der Operand eine Fließkommazahl, wird er vor der Berechnung auf einen Integer gekürzt. Liegt der Operand zwischen 0 und 4294967295 (0xffffffff), wird er als <u>vorzeichenloser</u> 32-Bit-Wert behandelt. Ansonsten wird er als <u>vorzeichenbehafteter</u> 64-Bit-Wert behandelt. Zum Beispiel wird <code>~0xf0f</code> zu 0xfffff0f0 (4294963440) ausgewertet.</p>
      <p><a name="amp"></a><strong>Adresse (&amp;)</strong>: <code>&amp;EigeneVar</code> ermittelt die Adresse des Speicherinhalts von <em>EigeneVar</em>, die typischerweise bei <a href="commands/DllCall.htm#struct">DllCall-Strukturen</a> verwendet wird. <code>&amp;EigeneVar</code> deaktiviert außerdem das Caching von Binärzahlen in dieser Variable, das ihre Performance verringern kann, falls sie jemals bei mathematischen oder numerischen Vergleichen verwendet wird. Caching einer Variable wird wieder aktiviert, sobald sich ihre Adresse ändert (z. B. per <a href="commands/VarSetCapacity.htm">VarSetCapacity()</a>).</p>
      <p><strong>Dereferenzierung (*)</strong>: <code>*Expression </code>assumes that <code>Expression</code> resolves to a numeric memory address; it retrieves the byte at that address as a number between 0 and 255 (0 is always retrieved if the address is 0; but any other invalid address must be avoided because it might crash the script). Allerdings ist <a href="Functions.htm#NumGet">NumGet()</a> zum Abrufen von binären Zahlen besser geeignet.</p></td>
  </tr>
  <tr>
    <td align="center"><strong>*<br>
    
    /<br>
    
    //
    
    </strong></td>
    <td><p><strong>Multiplizieren (*)</strong>: Das Ergebnis ist ein Integer, wenn beide Eingabewerte Integer sind, ansonsten ist es eine Fließkommazahl.</p>
      <p><a name="divide"></a><strong>Echtes Dividieren (/)</strong>: True division yields a floating point result even when both inputs are integers. For example, <code>3/2</code> yields 1.5 rather than 1, and <code>4/2</code> yields 2.0 rather than 2.</p>
      <p><strong><a name="FloorDivide"></a>Floor-Dividieren (//)</strong>: Der Doppel-Schrägstrich-Operator verwendet die leistungsstarke Integer-Division, wenn beide Eingabewerte Integer sind. Zum Beispiel wird <code>5//3</code> eine 1 und <code>5//-3</code> eine -1 liefern. Ist einer der beiden Eingabewerte eine Fließkommazahl, wird die Fließkomma-Division erfolgen und das Ergebnis auf den nächsten linken Integer gekürzt. Zum Beispiel wird <code>5//3.0</code> eine 1.0 und <code>5.0//-3</code> das Ergebnis -2.0 liefern. Auch wenn das Ergebnis dieser Fließkomma-Division ein Integer ist, wird es im Fließkommaformat gespeichert, so dass es auch anderweitig als solches angesehen wird. Für Modulo, siehe <a href="Functions.htm#Mod">Mod()</a>.</p>
    <p> Die Operatoren <a href="#AssignOp">*=</a> und <a href="#AssignOp">/=</a> sind Abkürzungen zum Multiplizieren oder Dividieren des Wertes innerhalb einer Variable mit einem anderen Wert. Zum Beispiel erzeugt <code>Var *= 2</code> das gleiche Ergebnis wie <code>Var := Var * 2</code> (obwohl das erste bessere Performance erzielt).</p>
    <p>Die Division durch 0 wird ein leeres Ergebnis zurückgeben (leerer String).</p></td>
  </tr>
  <tr>
    <td align="center"><strong>+<br>
    
    -  </strong></td>
    <td><p><strong>Addieren (+)</strong> und <strong>Subtrahieren (-)</strong>. Im Zusammenhang dazu sind die Operatoren <a href="#AssignOp"><strong>+=</strong></a> und <a href="#AssignOp"><strong>-=</strong></a> Abkürzungen zum Erhöhen oder Verringern einer Variable. um Beispiel erzeugt <code>Var += 2</code> das gleiche Ergebnis wie <code>Var := Var + 2</code> (obwohl das erste bessere Performance erzielt). Similarly, a variable can be increased or decreased by 1 by using <a href="#IncDec">Var++, Var--, ++Var</a>, or <a href="#IncDec">--Var</a>.</p>
    </td>
  </tr>
  <tr id="bitwise">
    <td align="center"><strong>&lt;&lt;<br>
    
    &gt;&gt;  </strong></td>
    <td><strong>Bitweise Verschiebung nach links (&lt;&lt;)</strong> und <strong>nach rechts (&gt;&gt;)</strong>. Anwendungsbeispiel: <code>Wert1 &lt;&lt; Wert2</code>. Jeder Fließkomma-Eingabewert wird vor der Berechnung auf einen Integer gekürzt. Bitweise Verschiebung nach links (<strong>&lt;&lt;</strong>) ist das gleiche wie das Multiplizieren von <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>". Bitweise Verschiebung nach rechts (<strong>&gt;&gt;</strong>) ist das gleiche wie das Dividieren von <em>Wert1</em> mit "2, potenziert um <em>Wert2</em>" und Abrunden des Ergebnisses auf den nächsten linken Integer; zum Beispiel wird <code>-3&gt;&gt;1</code> eine -2 zurückgeben.</td>
  </tr>
  <tr>
    <td align="center"><strong>&amp;<br>
      
      ^<br>
      
      |
    
    </strong></td>
    <td><strong>Bitweises UND (&amp;)</strong>, <strong>bitweises exklusives ODER (^)</strong> und <strong>bitweises ODER (|)</strong>. Von diesen drei Operatoren hat <strong>&amp;</strong> die höchste und <strong>|</strong> die niedrigste Priorität. Jeder Fließkomma-Eingabewert wird vor der Berechnung auf einen Integer gekürzt.</td>
  </tr>
  <tr id="concat">
    <td align="center"><strong>.</strong></td>
    <td><p><strong>Verkettung</strong>. Der Punkt-Operator wird dazu verwendet, zwei Elemente zu einem String zu kombinieren (auf beiden Seiten des Punkts muss mindestens ein Leerzeichen vorkommen). Man kann den Punkt auch weglassen, um das gleiche zu erreichen (außer bei Zweideutigkeiten wie <code>x <strong>-</strong>y</code>, oder wenn das Element auf der rechten Seite ++ oder -- davor hat). Falls der Punkt weggelassen wird, sollte mindestens ein Leerzeichen zwischen den Elementen vorhanden sein.<br>
      Beispiel (Ausdrucksmethode): <code>Var := "Die Farbe ist " <strong>.</strong> Fundfarbe</code><br>
      Beispiel (traditionelle Methode): <code>Var = Die Farbe ist %Fundfarbe%</code></p>
        <p> Teilausdrücke können auch verkettet werden. Zum Beispiel: <code>Var := "Der Nettopreis ist " <strong>.</strong> Preis * (1 - Rabatt/100)</code>.</p>
        <p>Eine Zeile, die mit einem Punkt (oder mit jedem anderen Operator) beginnt, wird automatisch an die darüberliegende Zeile <a href="Scripts.htm#continuation">angehängt</a>.</p></td>
  </tr>
  <tr id="regex">
    <td align="center"><strong>~=</strong></td>
    <td>Shorthand for <a href="commands/RegExMatch.htm">RegExMatch</a>. For example, <code>"abc123" ~= "\d"</code> sets ErrorLevel to 0 and yields 4 (the position of the first numeric character).</td>
  </tr>
  <tr id="compare">
    <td align="center"><strong>&gt;&nbsp;&nbsp;&nbsp;&lt;<br>
    
    &gt;= &lt;=</strong></td>
    <td><strong>Größer (&gt;)</strong>, <strong>kleiner (&lt;)</strong>, <strong>größer gleich (&gt;=)</strong> und <strong>kleiner gleich (&lt;=)</strong>. If either of the inputs is not numeric (or both are strings), they are compared alphabetically. For example, 2 &lt; "10" is <em>true</em> whereas "2" &lt; "10" is <em>false</em>. The comparison is case sensitive only if <a href="commands/StringCaseSense.htm">StringCaseSense</a> has been turned on. Siehe auch: <a href="commands/Sort.htm">Sort</a></td>
  </tr>
  <tr id="equal">
    <td align="center"><strong>=<br>
      
      ==<br>
    
    &lt;&gt; !=  </strong></td>
    <td><strong>Equal (=) </strong>, <strong>case-sensitive-equal (==) </strong>, and <strong>not-equal (&lt;&gt;</strong> or <strong>!=)</strong>. The operators <strong>!=</strong> and <strong>&lt;&gt;</strong> are identical in function. The <strong>==</strong> operator behaves identically to <strong>=</strong> except when either of the inputs is not numeric (or both are strings), in which case <strong>==</strong> is always case sensitive and <strong>=</strong> is always case insensitive (the method of insensitivity depends on <a href="commands/StringCaseSense.htm">StringCaseSense</a>). By contrast, <strong>&lt;&gt;</strong> and <strong>!=</strong> obey <a href="commands/StringCaseSense.htm">StringCaseSense</a>.</td>
  </tr>
  <tr>
    <td align="center"><strong>IS</strong><br><strong>IN</strong><br><strong>CONTAINS</strong></td>
    <td id="is">
      <p><code><i>Value</i> <strong>is</strong> <i>Type</i></code>: Yields true (1) if <em>value</em> is of the given <em>type</em> or false (0) otherwise. For details, see <a href="commands/is.htm"><em>Value</em> is <em>Type</em></a>.</p>
      <p><a name="in"></a><a name="contains"></a><code><strong>in</strong></code> and <code><strong>contains</strong></code> are reserved for future use.</p>
    </td>
  </tr>
  <tr id="not">
    <td align="center"><strong>NOT</strong></td>
    <td><strong>Logisches NICHT</strong>. Hat die gleiche Funktion wie der <strong>!</strong>-Operator, nur mit geringerer Priorität. For example, <code>not (x = 3 or y = 3)</code> is the same as <code> <strong>!</strong>(x = 3 or y = 3)</code>.</td>
  </tr>
  <tr id="and">
    <td align="center"><strong>AND<br>
    
    &amp;&amp;  </strong></td>
    <td><p>Beide sind ein <strong>logisches UND</strong>. Zum Beispiel: <code>x &gt; 3 and x &lt; 10</code>.</p>
      <p>In the expression <code>x and y</code>, if x is <a href="#Boolean">true</a>, the result is y. Otherwise the result is x, and y is not evaluated at all - <a href="Functions.htm#ShortCircuit">short-circuit evaluation</a> is applied to enhance performance. Although the result is not limited to boolean 0 and 1, it can be interpreted as a <a href="#Boolean">boolean</a> value as with any other expression. In effect, the result is true only if both inputs are true.</p>
      <p>A line that begins with AND/OR/&amp;&amp;/|| (or any other operator) is automatically <a href="Scripts.htm#continuation">appended to</a> the line above it.</p>
      </td>
  </tr>
  <tr id="or">
    <td align="center"><strong>OR<br>
    
    ||  </strong></td>
    <td><p>Beide sind ein <strong>logisches ODER</strong>. Zum Beispiel: <code>x &lt;= 3 or x &gt;= 10</code>.</p>
      <p>In the expression <em>x or y</em>, if x is <a href="#Boolean">false</a>, the result is y. Otherwise the result is x, and y is not evaluated at all - <a href="Functions.htm#ShortCircuit">short-circuit evaluation</a> is applied to enhance performance. Although the result is not limited to boolean 0 and 1, it can be interpreted as a <a href="#Boolean">boolean</a> value as with any other expression. In effect, the result is true if either input is true.</p></td>
  </tr>
  <tr id="ternary">
    <td align="center"><strong>?:<br>
      </strong></td>
    <td><strong>Ternary operator</strong>. This operator is a shorthand replacement for the <a href="commands/IfExpression.htm">if-else statement</a>. Er wertet die Bedingung auf seiner linken Seite aus, um festzustellen, welche der beiden Verzweigungen das Endergebnis sein soll. For example, <code>var := x&gt;y ? 2 : 3</code> stores 2 in <em>Var</em> if x is greater than y; otherwise it stores 3. To enhance performance, only the winning branch is evaluated (see <a href="Functions.htm#ShortCircuit">short-circuit evaluation</a>).</td>
  </tr>
  <tr id="AssignOp">
    <td align="center"><strong>:=<br>
        
        +=<br>
        
        -=<br>
        
        *=<br>
        
        /=<br>
        
        //=<br>
        
        .=<br>
        
        |=<br>
        
        &amp;=<br>
        
        ^=<br>
        
        &gt;&gt;=<br>
        
        &lt;&lt;=<br>
      </strong>
    </td>
    <td><p><strong>Zuweisung</strong>. Performs an operation on the contents of a variable and stores the result back in the same variable. Der einfachste von denen ist der <a href="commands/SetExpression.htm">Doppelpunkt-Gleich-Operator (:=)</a>, um das Ergebnis eines Ausdrucks in eine Variable zu speichern. Die Beschreibungen der anderen Operatoren befinden sich bei den verwandten Einträgen in der Tabelle. Zum Beispiel wird <code>Var //= 2</code> per <a href="#FloorDivide">Floor-Division</a> <em>Var</em> mit 2 teilen und danach das Ergebnis wieder in <em>Var</em> zu speichern. Im Zusammenhang dazu ist <code>Var <strong>.=</strong> "abc"</code> die Kurzschreibweise von <code>Var := Var <strong>.</strong> "abc"</code>.</p>
      <p>Im Gegensatz zu den meisten anderen Operatoren werden Zuweisungen von rechts nach links ausgewertet. Folglich wird eine Zeile wie <code>Var1 := Var2 := 0</code> zuerst in <em>Var2</em> eine 0 und dann <em>Var1</em> in <em>Var2</em> speichern.</p>      
    <p>Wird eine Zuweisung als Eingabewert eines anderen Operators verwendet, ist deren Wert die Variable selbst. Zum Beispiel ist der Ausdruck <code>(Var += 2) &gt; 50</code> wahr, wenn der eben erhöhte Wert in <em>Var</em> größer als 50 ist. This also allows an assignment to be passed <a href="Functions.htm#ByRef">ByRef,</a> or its <a href="#amp">address</a> taken; for example: <code>&amp;(x:="abc")</code>.</p>
    <p>Die Priorität der Zuweisungsoperator erhöht sich automatisch, falls dadurch ein Syntaxfehler verhindert oder intuitiveres Verhalten bereitgestellt werden kann. Zum Beispiel: <code>not x := y</code> wird wie <code>not (x := y)</code> ausgewertet. Ebenso wird <code>++Var := X</code> wie <code>++(Var := X)</code> ausgewertet; und <code>Z &gt; 0 ? X := 2 : Y := 2</code> wie <code>Z &gt; 0 ? (X := 2) : (Y := 2)</code> ausgewertet.</p>
    </td>
  </tr>
  <tr id="comma">
    <td align="center"><strong>,</strong></td>
    <td><p><strong>Comma (multi-statement)</strong>. Kommas können verwendet werden, um mehrere Teilausdrücke auf einer Zeile zu schreiben. Das wird häufig dazu verwendet, mehrere Zuweisungen oder Funktionsaufrufe zu gruppieren. Zum Beispiel: <code>x:=1<strong>,</strong> y+=2<strong>,</strong> ++index, func()</code>. Solche Anweisungen werden von links nach rechts ausgeführt. Hinweis: A line that begins with a comma (or any other operator) is automatically <a href="Scripts.htm#continuation">appended to</a> the line above it. Siehe auch: <a href="#CommaPerf">comma performance</a>.</p>
        <p>When a multi-statement expression is used inside another expression, each sub-expression is evaluated and the value of the final (rightmost) sub-expression becomes the result of the expression. For example, <code>x := (++y, 1)</code> increments y and assigns the number 1 to x.</p>
      </td>
  </tr>
  <tr>
    <td align="center"><p><strong>mod()<br>
        
        round()<br>
    
    abs()</strong></p>      </td>
    <td>Diese und weitere interne mathematische Funktionen werden <a href="Functions.htm#Math">hier</a> beschrieben.</td>
  </tr>
  <tr>
    <td align="center"><strong>F(<i>p</i>*)</strong></td>
    <td>See <a href="Functions.htm#Variadic">Variadic Functions</a>.</td>
  </tr>
  <tr>
    <td align="center"><strong>x[y]</strong></td>
    <td><strong>Object access</strong>. Get or set a value or call a method of object <i>x</i>, where <i>y</i> is a parameter list or calculated method name. See <a href="Objects.htm#Usage_Simple_Arrays">array syntax</a> and <a href="Objects.htm#Usage_Objects">object syntax</a>.</td>
  </tr>
</table>
<p><strong><br>
    Performance</strong>: <a name="CommaPerf" id="CommaPerf"></a> The comma operator is usually faster than writing separate expressions, especially when assigning one variable to another (e.g. <code>x:=y, a:=b</code>). Die Performance wird weiter verbessert, wenn mehr und mehr Ausdrücke zu einem einzigen Ausdruck verbunden werden; zum Beispiel kann ein Geschwindigkeitszuwachs von 35 % erreicht werden, wenn fünf oder zehn einfache Ausdrücke zu einem Ausdruck kombiniert werden.</p>

<h2 id="BuiltIn">Interne Variablen</h2>
<p>Die folgenden Variablen sind im Programm integriert und können von jedem Script abgerufen werden. Außer <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a> und <a href="#CommandLine">Befehlszeilenparametern</a> sind diese Variablen schreibgeschützt; das heißt, dass deren Inhalt nicht direkt vom Script geändert werden kann.</p>
<h3>Inhaltsverzeichnis</h3>
<ul>
  <li>Sonderzeichen: <a href="#Space">A_Space</a>, <a href="#Tab">A_Tab</a></li>
  <li>Script-Eigenschaften: <a href="#CommandLine">Befehlszeilenparameter</a>, <a href="#WorkingDir">A_WorkingDir</a>, <a href="#ScriptDir">A_ScriptDir</a>, <a href="#ScriptName">A_ScriptName</a>, <a href="#prop">(...mehr...)</a></li>
  <li>Datum und Zeit: <a href="#YYYY">A_YYYY</a>, <a href="#MM">A_MM</a>, <a href="#DD">A_DD</a>, <a href="#Hour">A_Hour</a>, <a href="#Min">A_Min</a>, <a href="#Sec">A_Sec</a>, <a href="#date">(...mehr...)</a></li>
  <li>Script-Einstellungen: <a href="#IsSuspended">A_IsSuspended</a>, <a href="#TitleMatchMode">A_TitleMatchMode</a>, <a href="#settings">(...more...)</a> </li>
  <li>Abwesenheit des Benutzers: <a href="#TimeIdle">A_TimeIdle</a>, <a href="#TimeIdlePhysical">A_TimeIdlePhysical</a></li>
  <li>GUI-Fenster und Menüleisten: <a href="#MsgBoxResult">A_MsgBoxResult</a>, <a href="#Gui">A_Gui</a>, <a href="#GuiControl">A_GuiControl</a>, <a href="#GuiEvent">A_GuiEvent</a>, <a href="#EventInfo">A_EventInfo</a></li>
  <li>Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte: <a href="#ThisHotkey">A_ThisHotkey</a>, <a href="#EndChar">A_EndChar</a>, <a href="#ThisMenuItem">A_ThisMenuItem</a>, <a href="#h">(...mehr...)</a></li>
  <li>Betriebssystem und Benutzerinformationen: <a href="#OSVersion">A_OSVersion</a>, <a href="#Screen">A_ScreenWidth</a>, <a href="#Screen">A_ScreenHeight</a>, <a href="#os">(...mehr...)</a></li>
  <li>Sonstiges: <a href="#Cursor">A_Cursor</a>, <a href="#Caret">A_CaretX</a>, <a href="#Caret">A_CaretY</a>, <a href="misc/Clipboard.htm">Clipboard</a>, <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>, <a href="misc/ErrorLevel.htm">ErrorLevel</a></li>
  <li>Loop: <a href="#Index">A_Index</a>, <a href="#loop">(...mehr...)</a></li>
</ul>
<h3>Sonderzeichen</h3>
<table class="info">
  <tr id="Space">
    <td>A_Space</td>
    <td>Contains a single space character.</td>
  </tr>
  <tr id="Tab">
    <td>A_Tab</td>
    <td>Contains a single tab character.</td>
  </tr>
</table>
<h3 id="prop">Script-Eigenschaften</h3>
<table class="info">
  <tr id="CommandLine">
    <td>A_Args</td>
    <td>Contains an <a href="Objects.htm#Usage_Simple_Arrays">array</a> of command line parameters. For details, see <a href="Scripts.htm#cmd">Passing Command Line Parameters to a Script</a>.</td>
  </tr>
  <tr id="WorkingDir">
    <td>A_WorkingDir</td>
    <td>Gets or sets the script's current working directory, which is where files will be accessed by default. Der letzte Backslash ist nicht enthalten, sofern es nicht das Hauptverzeichnis ist. Zwei Beispiele: C:\ und C:\Eigene Dokumente. Use <a href="commands/SetWorkingDir.htm">SetWorkingDir</a> or assign a path to A_WorkingDir to change the working directory. A_WorkingDir defaults to A_ScriptDir, regardless of how the script was launched.</td>
  </tr>
  <tr id="InitialWorkingDir">
    <td>A_InitialWorkingDir</td>
    <td>The script's initial working directory, which is determined by how it was launched. For example, if it was run via shortcut -- such as on the Start Menu -- its initial working directory is determined by the "Start in" field within the shortcut's properties.</td>
  </tr>
  <tr id="ScriptDir">
    <td>A_ScriptDir</td>
    <td>Der vollständige Pfad des Verzeichnisses, auf dem sich das aktuelle Script befindet. Der letzte Backslash wird weggelassen (auch bei Hauptverzeichnissen).</td>
  </tr>
  <tr id="ScriptName">
    <td>A_ScriptName</td>
    <td>Der Dateiname des aktuellen Scripts, ohne dessen Pfad, z. B. EigenesScript.ahk.</td>
  </tr>
  <tr id="ScriptFullPath">
    <td>A_ScriptFullPath</td>
    <td>Die Kombination der zwei oben genannten Variablen für die komplette Dateispezifikation des Scripts, z. B. C:\Eigene Dokumente\EigenesScript.ahk.</td>
  </tr>
  <tr id="ScriptHwnd">
    <td>A_ScriptHwnd</td>
    <td>Die eindeutige ID (HWND/Handle) des versteckten Script-Hauptfensters.</td>
  </tr>
  <tr id="LineNumber">
    <td>A_LineNumber</td>
    <td><p>Die Nummer der aktuell ausgeführten Zeile innerhalb des Scripts (oder die Zeile aus einer <a href="commands/_Include.htm">#Include-Datei</a>). Diese Zeilennummer stimmt mit der überein, die auch von <a href="commands/ListLines.htm">ListLines</a> angezeigt wird; sie kann wie im folgenden Beispiel nützlich für Fehlermeldungen sein: <code>MsgBox, Log-Datei konnte nicht beschrieben werden (Zeilennummer %A_LineNumber%)</code></p>
    <p>  Da ein <a href="Scripts.htm#ahk2exe">kompiliertes Script</a> alle <a href="commands/_Include.htm">#Include-Dateien</a> zu einem großen Script zusammenführt, könnte sich die Zeilennummerierung vom unkompilierten Modus unterscheiden.</p></td>
  </tr>
  <tr id="LineFile">
    <td>A_LineFile</td>
    <td>Der vollständige Pfad und Name der Datei, auf dem sich <a href="#LineNumber">A_LineNumber</a> bezieht. Das wird das gleiche sein wie <a href="#ScriptFullPath">A_ScriptFullPath</a>, sofern sich die Zeile nicht auf eine <a href="commands/_Include.htm">#Include-Datei</a> aus einem unkompilierten Script bezieht.</td>
  </tr>
  <tr id="ThisFunc">
    <td>A_ThisFunc</td>
    <td>Der Name der <a href="Functions.htm">benutzerdefinierten Funktion</a>, die gerade ausgeführt wird (ansonsten leer); zum Beispiel: EigeneFunktion. Siehe auch: <a href="Functions.htm#IsFunc">IsFunc()</a> </td>
  </tr>
  <tr id="ThisLabel">
    <td>A_ThisLabel</td>
    <td>Der Name des <a href="misc/Labels.htm">Labels</a> (Subroutine), das gerade ausgeführt wird (ansonsten leer); zum Beispiel: EigenesLabel. Diese Variable wird aktualisiert, sobald das Script <a href="commands/Gosub.htm">Gosub</a>/<a href="commands/Return.htm">Return</a> oder <a href="commands/Goto.htm">Goto</a> ausführt. It is also updated for automatically-called labels such as <a href="commands/SetTimer.htm">timers</a>, <a href="commands/Gui.htm#DefaultWin">GUI threads</a>, <a href="commands/Menu.htm">menu items</a>, <a href="Hotkeys.htm">hotkeys</a>, <a href="Hotstrings.htm">hotstrings</a>, <a href="misc/Clipboard.htm#OnClipboardChange">OnClipboardChange</a>, and <a href="commands/OnExit.htm">OnExit</a>, However, A_ThisLabel is not updated when execution "falls into" a label from above; when that happens, A_ThisLabel retains its previous value. Siehe auch: <a href="#ThisHotkey">A_ThisHotkey</a> und <a href="Functions.htm#IsLabel">IsLabel()</a> </td>
  </tr>
  <tr id="AhkVersion">
    <td>A_AhkVersion</td>
    <td>Contains the version of AutoHotkey that is running the script, such as 1.0.22. Bei einem <a href="Scripts.htm#ahk2exe">kompilierten Script</a> wird die Version gemeldet, die ursprünglich zum Kompilieren verwendet wurde. Die Formatierung der Versionsnummer erlaubt es, mithilfe von "&gt;" oder "&gt;=" zu überprüfen, ob A_AhkVersion größer als eine bestimmte Versionsnummer ist: <code>if (A_AhkVersion &gt;= "1.0.25.07")</code>.</td>
  </tr>
  <tr id="AhkPath">
    <td>A_AhkPath</td>
    <td><p>Bei unkompilierten Scripts: Der vollständige Pfad und Name der EXE-Datei, die das aktuelle Script gerade ausführt. Zum Beispiel: C:\Program Files\AutoHotkey\AutoHotkey.exe</p>
    <p>Bei <a href="Scripts.htm#ahk2exe">kompilierten Scripts</a>: Das gleiche wie oben, außer dass das AutoHotkey-Verzeichnis mithilfe des Registrierungseintrags <em>HKEY_LOCAL_MACHINE\SOFTWARE\AutoHotkey\InstallDir</em> ermittelt wird. Wenn kein Eintrag gefunden wird, ist A_AhkPath leer.</p></td>
  </tr><!--tr id="IsUnicode">
    <td>A_IsUnicode</td>
    <td>Contains 1 if strings are Unicode (16-bit) and an empty string (which is considered <a href="#Boolean">false</a>) if strings are ANSI (8-bit). The format of strings depends on the version of AutoHotkey.exe which is used to run the script, or if it is compiled, which bin file was used to compile it.</td>
  </tr-->
  
  <tr id="IsCompiled">
    <td>A_IsCompiled</td>
    <td>Enthält eine 1, wenn das Script als <a href="Scripts.htm#ahk2exe">kompilierte EXE-Datei</a> ausgeführt wird, oder einen leeren String (das als <a href="#Boolean">falsch</a> angesehen wird), wenn das nicht der Fall ist.</td>
  </tr>
  <tr id="ExitReason">
    <td>A_ExitReason</td>
    <td>Der aktuellste Grund, wodurch das Script beendet wurde. Diese Variable ist leer, es sei denn, das Script hat eine <a href="commands/OnExit.htm">OnExit</a>-Subroutine, die zurzeit ausgeführt wird oder mindestens einmal durch einen Exit-Versuch aufgerufen wurde. Siehe <a href="commands/OnExit.htm">OnExit</a> für weitere Details.</td>
  </tr>
</table>
<h3 id="date">Datum und Zeit</h3>
<table class="info">
  <tr id="YYYY">
    <td>A_YYYY</td>
    <td>Das aktuelle 4-stellige Jahr (z. B. 2004). Synonym für A_Year. Hinweis: Um eine formatierte Zeit oder ein formatiertes Datum in Abhängigkeit des Gebietsschemas oder der Sprache abzurufen, verwende <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar</code> (Zeit und langes Datum) oder <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar,, LongDate</code> (ermittelt ein Datum im langen Format).</td>
  </tr>
  <tr id="MM">
    <td>A_MM</td>
    <td>Der aktuelle zweistellige Monat (01-12). Synonym für A_Mon.</td>
  </tr>
  <tr id="DD">
    <td>A_DD</td>
    <td>Der aktuelle zweistellige Tag des Monats (01-31). Synonym für A_MDay.</td>
  </tr>
  <tr id="MMMM">
    <td>A_MMMM</td>
    <td>Der aktuelle vollständige Monatsname in der aktuellen Sprache des Benutzers, z. B. Juli</td>
  </tr>
  <tr id="MMM">
    <td>A_MMM</td>
    <td>Der aktuelle abgekürzte Monatsname in der aktuellen Sprache des Benutzers, z. B. Jul</td>
  </tr>
  <tr id="DDDD">
    <td>A_DDDD</td>
    <td>Der aktuelle vollständige Wochentagsname in der aktuellen Sprache des Benutzers, z. B. Sonntag</td>
  </tr>
  <tr id="DDD">
    <td>A_DDD</td>
    <td>Der aktuelle abgekürzte Wochentagsname in der aktuellen Sprache des Benutzers, z. B. So</td>
  </tr>
  <tr id="WDay">
    <td>A_WDay</td>
    <td>Der aktuelle einstellige Wochentag (1-7). 1 ist Sonntag bei allen Gebietsschemen.</td>
  </tr>
  <tr id="YDay">
    <td>A_YDay</td>
    <td>Der aktuelle Tag im Jahr (1-366). Der Wert wird nicht mit Nullen aufgefüllt, z. B. wird 9 abgerufen, nicht 009. Ein Wert kann wie folgt mit Nullen aufgefüllt werden: <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar, , YDay0</code>.</td>
  </tr>
  <tr id="YWeek">
    <td>A_YWeek</td>
    <td>Das aktuelle Jahr + Wochennummer (z. B. 200453) nach ISO 8601. To separate the year from the week, use <a href="Functions.htm#SubStr">SubStr</a>. Genaue Definition von A_YWeek: Wenn die Woche, die den ersten 1. Januar hat, vier oder mehr Tage des neuen Jahres enthält, wird sie als Woche 1 angesehen. Ansonsten ist sie die letzte Woche des vorherigen Jahres und die nachfolgende Woche die Woche 1.</td>
  </tr>
  <tr id="Hour">
    <td>A_Hour</td>
    <td>Die aktuelle zweistellige Stunde (00-23) im 24-Stunden-Format. Das folgende Beispiel zeigt, wie die Zeit im 12-Stunden-Format sowie die Indikatoren AM bzw. PM abgerufen werden können: <code><a href="commands/FormatTime.htm">FormatTime</a>, AusgabeVar, , h:mm:ss tt</code>.</td>
  </tr>
  <tr id="Min">
    <td>A_Min</td>
    <td><p>Die aktuelle zweistellige Minute (00-59).</p>    </td>
  </tr>
  <tr id="Sec">
    <td>A_Sec</td>
    <td>Die aktuelle zweistellige Sekunde (00-59).</td>
  </tr>
  <tr id="MSec">
    <td>A_MSec</td>
    <td>Die aktuelle dreistellige Millisekunde (000-999). Das folgende Beispiel zeigt, wie die führenden Nullen entfernt werden können: <code>Millisekunden := A_MSec + 0</code>.</td>
  </tr>
  <tr id="Now">
    <td>A_Now</td>
    <td>Die aktuelle Ortszeit im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. Hinweis: Date and time math can be performed with <a href="commands/DateAdd.htm">DateAdd</a> and <a href="commands/DateDiff.htm">DateDiff</a>. Außerdem kann <a href="commands/FormatTime.htm">FormatTime</a> das Datum und/oder Zeit in Bezug auf das aktuelle Gebietsschema oder den aktuellen Einstellungen formatieren.</td>
  </tr>
  <tr id="NowUTC">
    <td>A_NowUTC</td>
    <td>Die koordinierte Weltzeit (UTC) im <a href="commands/FileSetTime.htm#YYYYMMDD">YYYYMMDDHH24MISS</a>-Format. UTC ist grundsätzlich das gleiche wie Greenwich Mean Time (GMT).</td>
  </tr>
  <tr id="TickCount">
    <td>A_TickCount</td>
    <td><p>Ruft die Anzahl der Millisekunden ab, die seit dem Systemstart verstrichen sind. Durch Speichern von A_TickCount in eine Variable kann die verstrichene Zeit später gemessen werden, indem diese Variable mit dem aktuellsten A_TickCount-Wert subtrahiert wird. Zum Beispiel:</p>
        <pre>Startzeit := A_TickCount
Sleep, 1000
Ablaufzeit := A_TickCount - Startzeit
MsgBox,  %Ablaufzeit% Millisekunden sind verstrichen.</pre>
<p>Benötigt man eine höhere Genauigkeit als die 10 ms von A_TickCount, verwende <a href="commands/DllCall.htm#QPC">QueryPerformanceCounter()</a>.</p>
</td>
  </tr>
</table>
<h3 id="settings">Script-Einstellungen</h3>
<table class="info">
  <tr id="IsSuspended">
    <td>A_IsSuspended</td>
    <td>Enthält 1, falls das Script <a href="commands/Suspend.htm">gesperrt</a> ist, ansonsten 0.</td>
  </tr>
  <tr id="IsPaused">
    <td>A_IsPaused</td>
    <td>Enthält 1, wenn der <a href="misc/Threads.htm">Thread</a> unmittelbar unterhalb des aktuellen Threads <a href="commands/Pause.htm">pausiert</a> ist. Ansonsten enthält die Variable eine 0.</td>
  </tr>
  <tr id="IsCritical">
    <td>A_IsCritical</td>
    <td>Enthält 0, wenn <a href="commands/Critical.htm">Critical</a> beim <a href="misc/Threads.htm">aktuellen Thread</a> deaktiviert ist. Ansonsten ist ein Integer größer als 0 enthalten, das die <a href="commands/Critical.htm#Interval">Nachrichtenüberprüfungsfrequenz</a> von Critical ist. Da <code>Critical 0</code> den kritischen Status deaktiviert, kann der aktuelle Status von Critical mithilfe von <code>Alt_IsCritical := A_IsCritical</code> gespeichert und später mit <code>Critical %Alt_IsCritical%</code> wiederhergestellt werden.</td>
  </tr>
  <tr id="TitleMatchMode">
    <td>A_TitleMatchMode</td>
    <td><strong>Read/write:</strong> The current mode set by <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>: 1, 2, 3 oder RegEx.</td>
  </tr>
  <tr id="TitleMatchModeSpeed">
    <td>A_TitleMatchModeSpeed</td>
    <td><strong>Read/write:</strong> The current match speed (fast or slow) set by <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>.</td>
  </tr>
  <tr id="DetectHiddenWindows">
    <td>A_DetectHiddenWindows</td>
    <td><strong>Read/write:</strong> The current mode (On or Off) set by <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>.</td>
  </tr>
  <tr id="DetectHiddenText">
    <td>A_DetectHiddenText</td>
    <td><strong>Read/write:</strong> The current mode (On or Off) set by <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>.</td>
  </tr>
  <tr id="StringCaseSense">
    <td>A_StringCaseSense</td>
    <td><strong>Read/write:</strong> The current mode (On, Off, or Locale) set by <a href="commands/StringCaseSense.htm">StringCaseSense</a>.  </td>
  </tr>
  <tr id="FileEncoding">
    <td>A_FileEncoding</td>
    <td><strong>Read/write:</strong> The default encoding for various commands; see <a href="commands/FileEncoding.htm">FileEncoding</a>.</td>
  </tr>
  <tr id="KeyDelay">
    <td>A_KeyDelay</td>
    <td><strong>Read/write:</strong> The current delay set by <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>. This delay is for the traditional SendEvent mode, not <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>.</td>
  </tr>
  <tr id="WinDelay">
    <td>A_WinDelay</td>
    <td><strong>Read/write:</strong> The current delay set by <a href="commands/SetWinDelay.htm">SetWinDelay</a>.</td>
  </tr>
  <tr id="ControlDelay">
    <td>A_ControlDelay</td>
    <td><strong>Read/write:</strong> The current delay set by <a href="commands/SetControlDelay.htm">SetControlDelay</a>.</td>
  </tr>
  <tr id="MouseDelay">
    <td>A_MouseDelay</td>
    <td><strong>Read/write:</strong> The current delay set by <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>. This delay is for the traditional SendEvent mode, not <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>.</td>
  </tr>
  <tr id="DefaultMouseSpeed">
    <td>A_DefaultMouseSpeed</td>
    <td><strong>Read/write:</strong> The current speed set by <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>.</td>
  </tr>
  <tr id="RegView">
    <td>A_RegView</td>
    <td><strong>Read/write:</strong> The current registry view as set by <a href="commands/SetRegView.htm">SetRegView</a>.</td>
  </tr>
  <tr id="IconHidden">
    <td>A_IconHidden</td>
    <td>Enthält eine 1, wenn das Tray-Icon gerade versteckt ist, ansonsten 0. Das Icon kann mithilfe von <a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> oder des <a href="commands/Menu.htm">Menu</a>-Befehls versteckt werden.</td>
  </tr>
  <tr id="IconTip">
    <td>A_IconTip</td>
    <td>Leer, es sei denn, ein benutzerdefinierter ToolTip wurde für das Tray-Icon per <code><a href="commands/Menu.htm">Menu</a>, Tray, Tip</code> angegeben, in diesem Fall enthält die Variable den Text des ToolTips.</td>
  </tr>
  <tr id="IconFile">
    <td>A_IconFile</td>
    <td>Leer, es sei denn, ein Tray-Icon wurde per <code><a href="commands/Menu.htm">Menu</a>, Tray, Icon</code> angegeben, in diesem Fall enthält die Variable den vollständigen Pfad und Name der Icon-Datei. <strong>Bekannte Einschränkung:</strong> Dieser Pfad kann falsch sein, falls das Script ursprünglich einen relativen Pfad zu einer DLL-Systemdatei übergeben hat; zum Beispiel <code>Menu, Tray, Icon, user32.dll, 2</code>.</td>
  </tr>
  <tr id="IconNumber">
    <td>A_IconNumber</td>
    <td>Leer, wenn A_IconFile leer ist. Ansonsten ist die Nummer des Icons von A_IconFile enthalten (typischerweise 1).</td>
  </tr>
</table>
<h3>Abwesenheit des Benutzers </h3>
<table class="info">
  <tr id="TimeIdle">
    <td>A_TimeIdle</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit der letzten Tastatur-, Maus- oder sonstige Eingabe verstrichen sind. Dadurch kann festgestellt werden, ob der Benutzer abwesend ist. Physische Benutzereingaben sowie künstlich erzeugte Eingaben von <strong>beliebigen</strong> Programmen oder Scripts (z. B. der <a href="commands/Send.htm">Send</a>- oder <a href="commands/MouseMove.htm">MouseMove</a>-Befehl) setzen diesen Wert wieder auf 0. Da dieser Wert in Zehnerschritten erhöht wird, sollte nicht überprüft werden, ob der Wert einem anderen Wert entspricht. Überprüft stattdessen, ob der Wert größer oder kleiner als ein anderer Wert ist. Zum Beispiel:
<pre>if A_TimeIdle &gt; 600000
    MsgBox, The last keyboard or mouse activity was at least 10 minutes ago.</pre></td>
  </tr>
  <tr id="TimeIdlePhysical">
    <td>A_TimeIdlePhysical</td>
    <td><p>Ähnlich wie oben, außer dass künstliche Tastatureingaben und/oder Mausklicks ignoriert werden, sobald der entsprechende Hook (<a href="commands/_InstallKeybdHook.htm">Tastatur</a> oder <a href="commands/_InstallMouseHook.htm">Maus</a>) installiert ist; das heißt, dass die Variable nur auf physische Ereignisse reagiert. Dadurch wird verhindert, dass simulierte Tastatureingaben und Mausklicks fälschlicherweise die Anwesenheit des Benutzers anzeigen. Falls kein Hook installiert ist, hat diese Variable die gleiche Bedeutung wie A_TimeIdle. Ist nur ein Hook installiert, beeinflusst nur dessen Art von physischer Eingabe die interne Variable A_TimeIdlePhysical (die Eingabe von einem anderen/nicht installierten Hook, sowohl physische als auch künstliche, hat kein Effekt).</p>    </td>
  </tr>
</table>
<h3>GUI-Fenster und Menüleisten</h3>
<table class="info">
  <tr id="MsgBoxResult">
    <td>A_MsgBoxResult</td>
    <td>The <a href="commands/MsgBox.htm#Result">result</a> of the most recent <a href="commands/MsgBox.htm">MsgBox</a> command.</td>
  </tr>
  <tr id="Gui">
    <td>A_Gui</td>
    <td>Name oder Nummer des <a href="commands/Gui.htm">GUI</a>-Fensters, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Diese Variable ist leer, es sei denn, ein GUI-Steuerelement, ein Menüleistenelement oder ein Ereignis wie GuiClose/GuiEscape hat den aktuellen Thread gestartet.</td>
  </tr>
  <tr id="GuiControl">
    <td>A_GuiControl</td>
    <td>Der zugewiesene Variablenname des GUI-Steuerelements, das den <a href="misc/Threads.htm">aktuellen Thread</a> gestartet hat. Fehlt dem Steuerelement eine <a href="commands/Gui.htm#Events">zugewiesene Variable</a>, enthält A_GuiControl stattdessen die ersten 63 Zeichen des Textes/der Bezeichnung (wird häufiger benutzt, damit nicht für jede Schaltfläche ein Variablennamen zugewiesen werden muss). A_GuiControl ist leer, sobald: 1) A_Gui leer ist; 2) ein GUI-Menüleistenpunkt oder Ereignis wie GuiClose/GuiEscape den aktuellen Thread gestartet hat; 3) dem Steuerelement eine zugewiesene Variable sowie eine Bezeichnung fehlt; oder 4) das Steuerelement nicht länger vorhanden ist, welches den aktuellen Thread ursprünglich gestartet hat (z. B. durch <a href="commands/Gui.htm#Destroy">Gui Destroy</a>).</td>
  </tr>
  <tr id="GuiWidth">
    <td>A_GuiWidth<br>
    
    A_GuiHeight</td>
    <td>Diese Variablen enthalten die Breite und Höhe des GUI-Fensters, wenn sie in einer <a href="commands/Gui.htm#GuiSize">GuiSize-Subroutine</a> verwendet werden. Sie beziehen sich auf den Client-Bereich des GUI-Fensters, das der Bereich ohne Titelleiste, Menüleiste und Rahmen ist. These values are affected by <a href="commands/Gui.htm#DPIScale">DPI scaling</a>.</td>
  </tr>
  <tr id="GuiX">
    <td><a name="GuiY" id="GuiY"></a>A_GuiX<br>
    
    A_GuiY</td>
    <td>Diese Variablen enthalten die Koordinaten X und Y für <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>- und <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>-Ereignisse. Die Koordinaten beziehen sich auf die linke obere Ecke des Fensters. These values are affected by <a href="commands/Gui.htm#DPIScale">DPI scaling</a>.</td>
  </tr>
  <tr>
    <td>A_GuiEvent<br><span class="small80">oder A_GuiControlEvent</span></td>
    <td><p><a name="GuiControlEvent"></a><a name="GuiEvent"></a>The type of event that launched the <a href="misc/Threads.htm"></a><a href="misc/Threads.htm"></a> <a href="misc/Threads.htm">current thread</a>. If the thread was not launched via <a href="commands/Gui.htm">GUI action</a>, this variable is blank. Ansonsten enthält sie einen der folgenden Strings:</p>
      <p><strong>Normal</strong>: Das Ereignis wurde durch einen Linksklick oder durch Tastatureingaben ausgelöst (Pfeiltasten, Tabulatortaste, Leertaste, unterstrichene Tastenkürzel und so weiter). Dieser Wert wird auch bei Menüleistenelementen und Sonderereignisse wie GuiClose und GuiEscape verwendet.</p>
      <p><strong>DoubleClick</strong>: Das Ereignis wurde durch einen Doppelklick ausgelöst. Hinweis: Der erste Klick des Doppelklicks bewirkt weiterhin, dass zuerst das <em>Normal</em>-Ereignis ausgelöst wird. Das heißt, dass die Subroutine zweimal ausgeführt wird: beim ersten und danach beim zweiten Klick.</p>
      <p><strong>RightClick</strong>: Tritt nur bei <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/ListView.htm">ListViews</a> und <a href="commands/TreeView.htm">TreeViews</a> auf.</p>
      <p><strong>Context-sensitive values: </strong>For details see <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#Slider">Slider</a>, <a href="commands/GuiControls.htm#MonthCal">MonthCal</a>, <a href="commands/ListView.htm">ListView</a>, and <a href="commands/TreeView.htm">TreeView</a>.</p>
    </td>
  </tr>
  <tr id="EventInfo">
    <td>A_EventInfo</td>
    <td><p>Enthält zusätzliche Informationen über die folgenden Ereignisse:</p>
      <ul>
        <li>Das <a href="misc/Clipboard.htm#OnClipboardChange">OnClipboardChange-Label</a></li>
        <li><a href="Hotkeys.htm#Wheel">Mausrad-Hotkeys</a> (WheelDown/Up/Left/Right)</li>
        <li><a href="commands/RegisterCallback.htm">RegisterCallback()</a></li>
        <li><a href="commands/Gui.htm#label">GUI-Ereignisse</a>, nämlich <a href="commands/Gui.htm#GuiContextMenu">GuiContextMenu</a>, <a href="commands/Gui.htm#GuiDropFiles">GuiDropFiles</a>, <a href="commands/GuiControls.htm#ListBox">ListBox</a>, <a href="commands/ListView.htm">ListView</a>, <a href="commands/TreeView.htm">TreeView</a> und <a href="commands/GuiControls.htm#StatusBar">StatusBar</a>. Falls keine zusätzlichen Informationen über ein Ereignis vorhanden sind, enthält A_EventInfo eine 0.</li>
      </ul>
      <p>A_EventInfo can also be set by the script.</p></td>
  </tr>
</table>
<p>Hinweis: Im Gegensatz zu Variablen wie A_ThisHotkey behält jeder <a href="misc/Threads.htm">Thread</a> seinen eigenen Wert für A_Gui, A_GuiControl, A_GuiX/Y, A_GuiEvent und A_EventInfo. Sobald deshalb ein Thread von einem anderen Thread unterbrochen und danach fortgesetzt wird, werden weiterhin die ursprünglichen/richtigen Werte für diese Variablen verwendet.</p>
<h3 id="h">Hotkeys, Hotstrings und benutzerdefinierte Menüpunkte </h3>
<table class="info">
  <tr id="ThisMenuItem">
    <td>A_ThisMenuItem</td>
    <td>Der Name des zuletzt ausgewählten <a href="commands/Menu.htm">benutzerdefinierten Menüpunkts</a> (ansonsten leer).</td>
  </tr>
  <tr id="ThisMenu">
    <td>A_ThisMenu</td>
    <td>Enthält den Namen des Menüs, in dem A_ThisMenuItem ausgewählt wurde.</td>
  </tr>
  <tr id="ThisMenuItemPos">
    <td>A_ThisMenuItemPos</td>
    <td>Eine Nummer, die die <u>aktuelle</u> Position von A_ThisMenuItem in A_ThisMenu kennzeichnet. Für das erste Element die Nummer 1, für das zweite Element die Nummer 2, usw. Trennlinien zählen dazu. Diese Variable ist leer, sobald A_ThisMenuItem leer oder nicht länger in A_ThisMenu vorhanden ist. Sie ist auch leer, wenn A_ThisMenu selbst nicht mehr existiert.</td>
  </tr>
  <tr id="ThisHotkey">
    <td>A_ThisHotkey</td>
    <td><p>Der zuletzt ausgeführte <a href="Hotkeys.htm">Hotkey</a> oder <a href="Hotstrings.htm">Hotstring ohne Automatisches Ersetzen</a> (ansonsten leer), z. B. #z. Dieser Wert ändert sich, sobald der <a href="misc/Threads.htm">aktuelle Thread</a> durch einen anderen Hotkey unterbrochen wird, deshalb sollte sichergestellt werden, diesen Wert sofort in eine andere Variable zu kopieren, falls später wieder der ursprüngliche Wert in einer Subroutine verwendet werden soll.</p>
      <p>Wenn ein Hotkey erst erstellt wird (entweder mit einem <a href="commands/Hotkey.htm">Hotkey-Befehl</a> oder einem <a href="Hotkeys.htm">Label mit zwei Doppelpunkten</a>), entsteht aus dem Tastennamen und der Anordnung der Modifikatorzeichen der permanente Name des Hotkeys. Siehe auch: <a href="#ThisLabel">A_ThisLabel</a></p></td>
  </tr>
  <tr id="PriorHotkey">
    <td>A_PriorHotkey</td>
    <td>Das gleiche wie oben, aber für den vorherigen Hotkey. Ansonsten ist sie leer. </td>
  </tr>
  <tr id="PriorKey">
    <td>A_PriorKey</td>
    <td>The name of the last key which was pressed prior to the most recent key-press or key-release, or blank if no applicable key-press can be found in the key history. Alle erzeugten Eingaben von AutoHotkey-Scripts werden ignoriert. For this variable to be of use, the <a href="commands/_InstallKeybdHook.htm">keyboard</a> or <a href="commands/_InstallMouseHook.htm">mouse hook</a> must be installed and <a href="commands/KeyHistory.htm">key history</a> must be enabled.</td>
  </tr>
  <tr id="TimeSinceThisHotkey">
    <td>A_TimeSinceThisHotkey</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit dem Drücken von A_ThisHotkey verstrichen sind. Sie enthält -1, sobald A_ThisHotkey leer ist.</td>
  </tr>
  <tr id="TimeSincePriorHotkey">
    <td>A_TimeSincePriorHotkey</td>
    <td>Ruft die Anzahl der Millisekunden ab, die seit dem Drücken von A_PriorHotkey verstrichen sind. Sie enthält -1, sobald A_PriorHotkey leer ist.</td>
  </tr>
  <tr id="EndChar">
    <td>A_EndChar</td>
    <td>Das <a href="Hotstrings.htm#EndChars">Endzeichen</a>, welches vom Benutzer gedrückt wurde, um den aktuellsten <a href="Hotstrings.htm">Hotstring ohne Automatisches Ersetzen</a> auszulösen. Wenn kein Endzeichen benötigt wurde (wegen der *-Option), wird diese Variable leer gemacht.</td>
  </tr>
</table>
<h3 id="os">Betriebssystem und Benutzerinformationen </h3>
<table class="info">
  <tr id="ComSpec">
    <td>A_ComSpec</td>
    <td>Enthält den gleichen String wie die ComSpec-Umgebungsvariable (z. B. C:\Windows\system32\cmd.exe). Diese Variable wird oft mit <a href="commands/Run.htm">Run/RunWait</a> verwendet.</td>
  </tr>
  <tr id="Temp">
    <td>A_Temp</td>
    <td>Der vollständige Pfad und Name des Ordners, der dazu bestimmt ist, temporäre Dateien zu beinhalten (z. B. C:\DOCUME~1\Benutzername\LOCALS~1\Temp). Der Pfad wird von einem der folgenden Orten abgerufen (in dieser Reihenfolge): 1) <a href="#env">Umgebungsvariable</a> TMP, TEMP oder USERPROFILE; 2) Windows-Verzeichnis.</td>
  </tr>
  <tr id="OSVersion">
    <td>A_OSVersion</td>
    <td>The version number of the operating system, in the format "<em>major</em>.<em>minor</em>.<em>build</em>". For example, Windows 7 SP1 is 6.1.7601.</td>
  </tr>
  <tr id="Is64bitOS">
    <td>A_Is64bitOS</td>
    <td>Enthält 1 (wahr), wenn das System im 64-Bit-Format ist, ansonsten 0 (falsch).</td>
  </tr>
  <tr id="PtrSize">
    <td>A_PtrSize</td>
    <td>Enthält die Größe eines Pointers in Bytes. Entweder 4 (32-Bit) oder 8 (64-Bit), je nachdem, mit welcher Art von ausführbarer Datei (EXE) das Script läuft.</td>
  </tr>
  <tr id="Language">
    <td>A_Language</td>
    <td>Die Standardsprache des Systems, das einer von <a href="misc/Languages.htm">diesen vierstelligen Codes</a> ist.</td>
  </tr>
  <tr id="ComputerName">
    <td>A_ComputerName</td>
    <td>Der im Netzwerk angezeigte Name des Computers. </td>
  </tr>
  <tr id="UserName">
    <td>A_UserName</td>
    <td>Der Anmeldename des Benutzers, der das Script gestartet hat. </td>
  </tr>
  <tr id="WinDir">
    <td>A_WinDir</td>
    <td>Das Windows-Verzeichnis. Zum Beispiel: C:\Windows</td>
  </tr>
  <tr id="ProgramFiles">
    <td>A_ProgramFiles</td>
    <td>Das Programmverzeichnis (z. B. C:\Programme).</td>
  </tr>
  <tr id="AppData">
    <td>A_AppData</td>
    <td>Der vollständige Pfad und Name des Ordners, der anwendungsspezifische Daten des aktuellen Benutzers enthält. Zum Beispiel: C:\Dokumente und Einstellungen\Benutzername\Anwendungsdaten</td>
  </tr>
  <tr id="AppDataCommon">
    <td>A_AppDataCommon</td>
    <td>Der vollständige Pfad und Name des Ordners, der anwendungsspezifische Daten von allen Benutzern enthält.</td>
  </tr>
  <tr id="Desktop">
    <td>A_Desktop</td>
    <td>Der vollständige Pfad und Name des Ordners, der die Desktop-Dateien des aktuellen Benutzers enthält.</td>
  </tr>
  <tr id="DesktopCommon">
    <td>A_DesktopCommon</td>
    <td>Der vollständige Pfad und Name des Ordners, der die Desktop-Dateien von allen Benutzern enthält.</td>
  </tr>
  <tr id="StartMenu">
    <td>A_StartMenu</td>
    <td>Der vollständige Pfad und Name des Startmenüordners vom aktuellen Benutzer.</td>
  </tr>
  <tr id="StartMenuCommon">
    <td>A_StartMenuCommon</td>
    <td>Der vollständige Pfad und Name des Startmenüordners aller Benutzer.</td>
  </tr>
  <tr id="Programs">
    <td>A_Programs</td>
    <td>Der vollständige Pfad und Name des Programmordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="ProgramsCommon">
    <td>A_ProgramsCommon</td>
    <td>Der vollständige Pfad und Name des Programmordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="Startup">
    <td>A_Startup</td>
    <td>Der vollständige Pfad und Name des Autostart-Ordners im Startmenü des aktuellen Benutzers.</td>
  </tr>
  <tr id="StartupCommon">
    <td>A_StartupCommon</td>
    <td>Der vollständige Pfad und Name des Autostart-Ordners im Startmenü aller Benutzer.</td>
  </tr>
  <tr id="MyDocuments">
    <td>A_MyDocuments</td>
    <td>Der vollständige Pfad und Name von "Eigene Dokumente" des aktuellen Benutzers. In Gegensatz zu den meisten anderen Variablen ist der letzte Backslash nicht vorhanden, falls der Ordner das Hauptverzeichnis ist. Zum Beispiel ist M: anstelle von M:\ enthalten.</td>
  </tr>
  <tr id="IsAdmin">
    <td>A_IsAdmin</td>
    <td><p>Wenn der aktuelle Benutzer Administratorrechte hat, enthält diese Variable eine 1. Ansonsten enthält sie eine 0.</p>
    <p><a name="RequireAdmin" id="RequireAdmin"></a>In Windows Vista oder höher benötigen einige Scripts möglicherweise Administratorrechte, damit sie richtig funktionieren (z. B. ein Script, das mit Prozessen oder Fenster interagiert, die als Administrator ausgeführt werden). Mit dem folgenden Beispiel am Anfang des Scripts wird das gewährleistet:</p>
    <pre>if not A_IsAdmin
{
   Run *RunAs "%A_ScriptFullPath%"
   ExitApp
}</pre></td>
  </tr>
  <tr id="Screen">
    <td><p>A_ScreenWidth<br>
    
    A_ScreenHeight</p>    </td>
    <td><p>Die Breite und Höhe des primären Monitors in Pixel (z. B. 1024 und 768).</p>
      <p>Mit <a href="commands/SysGet.htm">SysGet</a> können die Abmessungen von anderen Monitoren abgerufen werden.</p>
      <p>Um stattdessen die Breite und Höhe des gesamten Desktops zu ermitteln (auch wenn es sich über mehrere Monitore erstreckt), verwende das folgende Beispiel:<br>
<pre>
<a href="commands/SysGet.htm">SysGet</a>, VirtuelleBreite, 78
<a href="commands/SysGet.htm">SysGet</a>, VirtuelleHöhe, 79
</pre>
    <p>Darüber hinaus kann <a href="commands/SysGet.htm">SysGet</a> verwendet werden, um den Arbeitsbereich eines Monitors zu erfassen, der möglicherweise kleiner ist als die Gesamtfläche des Monitors, weil die Taskleiste und andere registrierte Desktop-Werkzeugleisten nicht berücksichtigt werden.</p></td>
  </tr>
  <tr id="ScreenDPI">
    <td>A_ScreenDPI</td>
    <td>Die Anzahl der Pixel pro logischem Inch entlang der Bildschirmbreite. Bei einem System mit mehreren Anzeigemonitoren ist dieser Wert für alle Monitore gleich. Bei vielen Systemen ist das 96; abhängig von der Textgrößeneinstellung (DPI) des Systems. Siehe auch <a href="commands/Gui.htm#DPIScale">Gui -DPIScale</a>.</td>
  </tr>
  <tr id="IPAddress">
    <td>A_IPAddress1 bis 4 </td>
    <td>Die IP-Adressen der ersten 4 Netzwerkadaptern im Computer.</td>
  </tr>
</table>
<h3>Sonstiges</h3>
<table class="info">
  <tr id="Cursor">
    <td>A_Cursor</td>
    <td><p>Der Typ des gerade angezeigten Mauszeigers. Es ist eines der folgenden Wörter enthalten: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. Die Abkürzungen bei den Size-Mauszeigern sind Himmelsrichtungen, z. B. NESW = NorthEast+SouthWest (Nordosten+Südwesten). Die handförmigen Mauszeiger (Zeigen und Greifen) sind als Unknown klassifiziert.</p></td>
  </tr>
  <tr id="Caret">
    <td>A_CaretX<br>
    
    A_CaretY</td>
    <td><p>Die aktuellen Koordinaten X und Y des Text-Cursors (Einfügemarke). Die Koordinaten beziehen sich auf das aktive Fenster, sofern nicht <a href="commands/CoordMode.htm">CoordMode</a> verwendet wird, um diese relativ zum ganzen Bildschirm zu machen. Wenn kein aktives Fenster vorhanden ist oder die Cursor-Position nicht ermittelt werden kann, sind diese Variablen leer.</p>
      <p>Mit dem folgenden Script ist es möglich, beim Bewegen des Text-Cursors dessen aktuelle Position in einem ToolTip anzuzeigen. Beachte, dass einige Fenster (z. B. bestimmte Versionen von MS Word) immer die gleiche Cursor-Position melden, unabhängig von ihrer aktuellen Position.</p>
<pre>
#Persistent
SetTimer, Cursorüberwachung, 100
Return

Cursorüberwachung:
ToolTip, X%A_CaretX% Y%A_CaretY%, A_CaretX, A_CaretY - 20
Return
</pre>
      <p>Wenn der Variableninhalt mehrmals schnell aufgerufen wird (d. h. alle 500 ms oder schneller), besteht die Wahrscheinlichkeit, dass der Benutzer keinen Doppelklick durchführen kann. Es ist keine Übergangslösung bekannt.</p></td>
  </tr>
  <tr>
    <td>Clipboard</td>
    <td>Der Inhalt der Zwischenablage, die gelesen oder beschrieben werden kann. Siehe <a href="misc/Clipboard.htm">Clipboard</a> für mehr Details.</td>
  </tr>
  <tr>
    <td>ClipboardAll</td>
    <td>Der gesamte Inhalt der Zwischenablage (z. B. Formatierung und Text). Siehe <a href="misc/Clipboard.htm#ClipboardAll">ClipboardAll</a>.</td>
  </tr>
  <tr>
    <td>ErrorLevel</td>
    <td>Siehe <a href="misc/ErrorLevel.htm">ErrorLevel</a>.</td>
  </tr>
  <tr id="LastError">
    <td>A_LastError</td>
    <td><p>This is usually the result from the OS's GetLastError() function after the script calls certain commands/functions, or the HRESULT of the last COM object invocation. See <a href="commands/DllCall.htm#LastError">DllCall()</a> or <a href="commands/Run.htm#LastError">Run/RunWait</a> for more details.</p>
    <p>Assigning a value to A_LastError also causes the OS's SetLastError() function to be called.</p></td>
  </tr>
</table>
<h3 id="loop">Loop</h3>
<table class="info">
  <tr id="Index">
    <td>A_Index</td>
    <td><strong>Read/write:</strong> This is the number of the current loop iteration (a 64-bit integer). Zum Beispiel enthält diese Variable die Nummer 1, wenn das Script den Schleifenkörper zum ersten Mal ausführt. For details see <a href="commands/Loop.htm">Loop</a> or <a href="commands/While.htm">While-loop</a>.</td>
  </tr>
  <tr>
    <td>A_LoopFileName, etc.  </td>
    <td>Diese und andere verwandte Variablen sind nur innerhalb einer <a href="commands/LoopFile.htm">Datei-Schleife</a> gültig.</td>
  </tr>
  <tr>
    <td>A_LoopRegName, etc.  </td>
    <td>Diese und andere verwandte Variablen sind nur innerhalb einer <a href="commands/LoopReg.htm">Registrierung-Schleife</a> gültig.</td>
  </tr>
  <tr>
    <td>A_LoopReadLine</td>
    <td>Siehe <a href="commands/LoopReadFile.htm">dateilesende Schleife</a>.</td>
  </tr>
  <tr>
    <td>A_LoopField</td>
    <td>Siehe <a href="commands/LoopParse.htm">Parsing-Schleife</a>. </td>
  </tr>
</table>

<h2 id="env">Umgebungsvariablen vs. normale Variablen</h2>
<p>Umgebungsvariablen werden vom Betriebssystem verwaltet. Es ist möglich, eine Liste von diesen in der Eingabeaufforderung anzeigen zu lassen, indem SET eingegeben und die Eingabetaste gedrückt wird. Use <a href="commands/EnvGet.htm">EnvGet</a> or <a href="commands/EnvSet.htm">EnvSet</a> to retrieve or set environment variable.</p>
<p>Mit <a href="commands/EnvSet.htm">EnvSet</a> kann eine neue Umgebungsvariable erstellt oder den Inhalt einer vorhandenen Umgebungsvariable geändert werden. Allerdings sind solche Ergänzungen und Änderungen nicht öffentlich; sie werden nicht vom Rest des Systems erkannt. Eine Ausnahme bildet ein Script, das <a href="commands/Run.htm">Run</a> oder <a href="commands/Run.htm">RunWait</a> zum Starten eines Programms verwendet (oder auch ein anderes Script): solche Programme erben die Umgebungsvariablen des übergeordneten Scripts, einschließlich die privaten.</p>

<h2 id="cap">Kapazität und Speicher einer Variable</h2>
<ul>
  <li>Sobald einer Variable ein neuer String übergeben wird, der länger als der aktuelle Inhalt ist, wird automatisch zusätzlicher Systemspeicher reserviert.</li>
  <li>Der Speicher einer großen Variable kann freigegeben werden, wenn ihr nichts zugewiesen wird (z. B. <code>Var := ""</code>).</li>
  <li>Es können beliebige viele Variablen erstellt werden. Das Programm ist so konzipiert, mehrere Millionen Variablen ohne deutlichen Rückgang der Performance zu unterstützen.</li>
  <li>Befehle, Funktionen und Ausdrücke, die numerische Eingaben akzeptieren, unterstützen bei Fließkommazahlen generell eine Genauigkeit von 15 Ziffern. Bei Integer-Zahlen werden vorzeichenbehaftete 64-Bit-Werte von -9223372036854775808 (-0x8000000000000000) bis 9223372036854775807 (0x7FFFFFFFFFFFFFFF) unterstützt. Alle Integer-Konstanten außerhalb dieses Bereichs werden nicht unterstützt und können zu widersprüchlichen Ergebnissen führen. Arithmetische Operationen bei Integer-Zahlen werden hingegen bei Überlauf entgegengesetzt (z. B. 0x7FFFFFFFFFFFFFFF + 1 = -0x8000000000000000).</li>
</ul>
</body>
</html>
