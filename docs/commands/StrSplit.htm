<!DOCTYPE HTML>
<html>
<head>
<title>StrSplit</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>StrSplit</h1>

<p>Teilt einen String in ein <a href="../Objects.htm#Usage_Simple_Arrays">Array</a> von Teilstrings auf, basierend auf die angegebenen Trennzeichen.</p>

<pre class="Syntax">Array := StrSplit(String [, Trennzeichen, ZeichenAuslassen])</pre>
<h3>Parameter</h3>
<dl>

  <dt>String</dt>
  <dd><p>Ein String, der aufgeteilt werden soll.</p></dd>

  <dt>Trennzeichen</dt>
  <dd><p>Ist dieser Parameter leer oder nicht vorhanden, wird jedes Zeichen des Eingabestrings als einzelner Teilstring behandelt.</p>
      <p>Ansonsten kann <em>Trennzeichen</em> entweder ein einzelner String oder ein Array mit Strings sein, die als Abgrenzungen zwischen den Teilstrings dienen sollen. Da die Trennzeichen nicht zu den Teilstrings gehören, sind sie nie im Rückgabewert enthalten. Befindet sich außerdem nichts zwischen einem Paar von Trennzeichen innerhalb des Eingabestrings, wird das entsprechende Array-Element leer sein.</p>      
      <p>Zum Beispiel: <code>"`,"</code> würde den String jeweils bei einem Komma teilen. Ebenso würde <code>[A_Tab, A_Space]</code> jedesmal ein neues Array-Element erstellen, wenn ein Leer- oder Tabulatorzeichen im Eingabestring vorkommt.</p>
      </dd>

  <dt>ZeichenAuslassen</dt>
  <dd><p>Eine optionale Liste von Zeichen (Unterscheidung zwischen Groß- und Kleinschreibung), die jeweils am Anfang und Ende eines Array-Elements weggelassen werden sollen. Wenn <em>ZeichenAuslassen</em> beispielsweise <code>" `t"</code> ist, wird bei jedem Element Leer- oder Tabulatorzeichen vom Anfang und Ende (aber nicht von der Mitte) entfernt.</p>
    <p>Falls <em>Trennzeichen</em> leer ist, kennzeichnet <em>ZeichenAuslassen</em>, welche Zeichen im Array weggelassen werden sollen.</p>
    </dd>

</dl>

<h3>Bemerkungen</h3>
<p>Leerraumzeichen wie Leer- und Tabulatorzeichen werden beibehalten, sofern sie nicht in <em>Trennzeichen</em> oder <em>ZeichenAuslassen</em> angegeben sind. Tabulator- und Leerzeichen können mithilfe von <a href="Trim.htm">Trim</a> an beiden Enden jeder Variable entfernt werden. Zum Beispiel: var := Trim(var)</p>
<p>Um einen String mit kommagetrennten Werten (CSV-Format) aufzuteilen, ist es sinnvoll, stattdessen eine <a href="LoopParse.htm">Parsende Schleife</a> zu verwenden, da sie über eine integrierte CSV-Handhabung verfügt.</p>
<p>Bevor die Felder aufgeteilt werden, können sie mit dem <a href="Sort.htm">Sort</a>-Befehl neu angeordnet werden.</p>
<p>Wenn die Teilstrings nicht dauerhaft im Arbeitsspeicher vorhanden sein müssen, solltest du in Betracht ziehen, eine <a href="LoopParse.htm">Parsende Schleife</a> zu verwenden. Du könntest dadurch viel Speicherplatz sparen, vor allem, wenn der Eingabestring sehr groß ist. Zum Beispiel:</p>
<pre>Farben = rot,grün,blau
Loop, parse, Farben, `,
    MsgBox Farbnummer %A_Index% ist %A_LoopField%.</pre>
<h3>Siehe auch</h3>
<p><a href="LoopParse.htm">Parsende Schleife</a>, <a href="../misc/Arrays.htm">Arrays</a>, <a href="Sort.htm">Sort</a>, <a href="SplitPath.htm">SplitPath</a>, <a href="../Functions.htm#InStr">InStr</a>, <a href="../Functions.htm#SubStr">SubStr</a>, <a href="../Functions.htm#StrLen">StrLen</a>, <a href="StrLower.htm">StrLower</a>, <a href="StrLower.htm">StrUpper</a>, <a href="StrReplace.htm">StrReplace</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent">TestString := "Das ist ein Test."
wort_array := StrSplit(TestString, A_Space, ".")  <em>; Punkte weglassen.</em>
MsgBox("Das vierte Wort ist " wort_array[4])

Farben := "rot,grün,blau"
FarbArray := StrSplit(Farben, ",")
Loop FarbArray.Length
{
    diese_Farbe := FarbArray[a_index]
    MsgBox, Farbnummer %a_index% ist %diese_Farbe%.
}</pre>

</body>
</html>
