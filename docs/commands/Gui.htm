<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>GUI</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../css/default.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
h1 {font-size: 200%; margin-top: 0.5em}
-->
</style>
</head>
<body>

<h1>GUI</h1>

<p>Erstellt und verwaltet Fenster und Steuerelemente. Solche Fenster können zur Dateneingabe oder als individuelle Benutzerschnittstellen verwendet werden.</p>

<pre class="Syntax">Gui, Unterbefehl [, Param2, Param3, Param4]</pre>
<h2>Inhaltsverzeichnis</h2>
<ul>
  <li><a href="#New">New</a>: Erstellt ein neues Fenster.</li>
  <li><a href="#Add">Add</a>: Erstellt ein Steuerelement wie z. B. Text, Button oder CheckBox.</li>
  <li><a href="#Show">Show</a>: Zeigt das Fenster an. Kann ein Fenster auch minimieren, maximieren oder verschieben.</li>
  <li><a href="#Submit">Submit</a>: Speichert die Benutzereingaben und versteckt optional das Fenster.</li>
  <li><a href="#Cancel">Cancel</a> (oder Hide): Versteckt das Fenster.</li>
  <li><a href="#Destroy">Destroy</a>: Entfernt das Fenster.</li>
  <li><a href="#Font">Font</a>: Bestimmt die Schriftart, die Schriftgröße, den Schriftstil und die Textfarbe für danach erstellte Steuerelemente.</li>
  <li><a href="#Color">Color</a>: Bestimmt die Hintergrundfarbe des Fensters und/oder dessen Steuerelemente.</li>
  <li><a href="#Margin">Margin</a>: Bestimmt den Abstand, der immer dann verwendet wird, wenn keine eindeutige Position für ein Steuerelement definiert ist. </li>
  <li><a href="#Options">Optionen und Styles für ein Fenster</a>: Legt verschiedene Optionen zum Aussehen und Verhalten des Fensters fest.</li>
  <li><a href="#Menu">Menu</a>: Hinzufügen oder Entfernen einer Menüleiste.</li>
  <li><a href="#Minimize">Minimize / Maximize / Restore</a>: Minimiert, Maximiert oder stellt ein Fenster wieder her.</li>
  <li><a href="#Flash">Flash</a>: Lässt die Taskleistenschaltfläche des Fensters aufblinken.</li>
  <li><a href="#Default">Default</a>: Ändert den Standard-GUI-Fensternamen des aktuellen Threads. </li>
  <li><a href="#Position">Position und Größe von Steuerelementen anpassen</a></li>
  <li><a href="#Events">Speichern von und Reagieren auf Benutzereingaben</a>: Variablen und g-Label </li>
  <li><a href="#OtherOptions">Optionen und Styles für Steuerelemente</a></li>
  <li><a href="#Labels">Fensterereignisse</a>: <a href="#GuiClose">GuiClose</a> | <a href="#GuiEscape">GuiEscape</a> | <a href="#GuiSize">GuiSize</a> | <a href="#GuiContextMenu">GuiContextMenu</a> | <a href="#GuiDropFiles">GuiDropFiles</a></li>
  <li><a href="#MultiWin">Mehrere GUI-Fenster erstellen</a></li>
  <li><a href="#DefaultWin">GUI-Ereignisse, Threads und Subroutinen</a></li>
  <li>Sonstiges: <a href="#Navigate">Navigation mit der Tastatur</a> | <a href="#Appear">Fensterdarstellung</a> | <a href="#GenRemarks">Allgemeine Bemerkungen</a></li>
  <li><a href="#Examples">Beispiele</a>: Enthält funktionierende Scripts, die GUI-Fenster und Steuerelemente zeigen.</li>
</ul>

<h2 id="New">Gui, New [, Options, Title]</h2>
<p>Erstellt ein neues Fenster.</p>
<pre>Gui, New  <em>; Erstellt ein neues unbenanntes GUI.</em>
Gui, Name:New  <em>; Erstellt ein neues GUI und zerstört jedes vorhandene GUI mit diesem Namen.</em>
</pre>
<p>Zur Vereinfachung wird das neue Fenster als <a href="#Default">Standard</a> für den aktuellen Thread definiert.</p>
<p>Wenn kein Name angegeben ist, haben spezielle <a href="#Labels">Label</a> wie <a href="#GuiClose"><em>GuiClose</em></a> standardmäßig das Präfix "Gui", sofern das nicht in den Optionen mit <a href="#PlusLabel">+Label<em>Präfix</em></a> überschrieben wird. Wenn das GUI, das den aktuellen Thread gestartet hat, auf diese Weise erstellt worden ist, enthält <a href="../Variables.htm#Gui">A_Gui</a> ein HWND, anstatt einen Namen. Desweiteren kann, wenn <a href="#GuiHwndOutputVar">+Hwnd<em>AusgabeVar</em></a> verwendet wird, das HWND des neuen Fensters in <em>AusgabeVar</em> gespeichert werden.</p>
<p>Falls ein Name angegeben ist, wird jedes vorhandene GUI mit diesem Namen <strong>zerstört</strong>.</p>
<p>Der <em>Optionen</em>-Parameter kann <a href="#Options">Optionen</a> enthalten, die vom Haupt-GUI-Befehl unterstützt werden.</p>
<p>Falls der <em>Titel</em>-Parameter nicht vorhanden ist, wird der Dateiname des Scripts verwendet.</p>
<p>Dieser Befehl dient nur dazu, Missverständnisse vorzubeugen - er ist nicht zwingend erforderlich. Wenn einer der anderen Gui-Unterbefehle (z. B. <a href="#Add">Gui, Add</a>) verwendet wird und das GUI nicht vorhanden ist, wird es automatisch erstellt.</p>

<h2 id="Add">Gui, Add, Steuerelementart [, Optionen, Text]</h2>
<p>Fügt ein Steuerelement in einem GUI-Fenster ein (und erstellt vorher das GUI-Fenster, falls notwendig).</p>

<p><em>Steuerelementart</em> kann folgendes sein:</p>
<ul>
  <li><a href="GuiControls.htm#Text">Text</a>, <a href="GuiControls.htm#Edit">Edit</a>, <a href="GuiControls.htm#UpDown">UpDown</a>, <a href="GuiControls.htm#Picture">Picture</a></li>
  <li><a href="GuiControls.htm#Button">Button</a>, <a href="GuiControls.htm#Checkbox">Checkbox</a>, <a href="GuiControls.htm#Radio">Radio</a></li>
  <li><a href="GuiControls.htm#DropDownList">DropDownList</a>, <a href="GuiControls.htm#ComboBox">ComboBox</a></li>
  <li><a href="GuiControls.htm#ListBox">ListBox</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a></li>
  <li><a href="GuiControls.htm#Link">Link</a>, <a href="GuiControls.htm#Hotkey">Hotkey</a>, <a href="GuiControls.htm#DateTime">DateTime</a>, <a href="GuiControls.htm#MonthCal">MonthCal</a></li>
  <li><a href="GuiControls.htm#Slider">Slider</a>, <a href="GuiControls.htm#Progress">Progress</a></li>
  <li><a href="GuiControls.htm#GroupBox">GroupBox</a>, <a href="GuiControls.htm#Tab">Tab</a>, <a href="GuiControls.htm#StatusBar">StatusBar</a></li>
  <li><a href="GuiControls.htm#ActiveX">ActiveX</a> (z. B. Internet Explorer Control)</li>
  <li><a href="GuiControls.htm#Custom">Custom</a></li>
</ul>
<p>Zum Beispiel:</p>
<pre>Gui, Add, Text,, Bitte Name eingeben:
Gui, Add, Edit, vName
Gui, Show</pre>
<h2 id="Show">Gui, Show [, Optionen, Titel]</h2>
<p>Sofern nicht anders in <em>Optionen</em> angegeben, wird dieser Befehl das Fenster sichtbar machen, dessen Minimierung aufheben (falls notwendig), <a href="WinActivate.htm">aktivieren</a> und dessen Titel festlegen. Ist <em>Titel</em> nicht vorhanden, wird der vorherige Titel weiterverwendet (ist keiner vorhanden, dann der Dateiname des Scripts).</p>
<p>Man kann die unten genannten Optionen X, Y, W und H weglassen, um die ursprüngliche Größe und Position des Fensters beizubehalten. Falls keine vorherige Position vorhanden ist, wird das Fenster automatisch auf eine der beiden Abmessungen zentriert, wenn die unten erwähnten Optionen X und/oder Y fehlen. Falls eine vorherige Größe nicht wiederhergestellt werden kann, wird die Fenstergröße automatisch an den vorhandenen Steuerelementen angepasst.</p>
<p>Folgende Strings können in <em>Optionen</em> angegeben werden (jede Zahl muss im dezimalen Format sein):</p>
<p> <strong>Wn</strong>: Bestimme mit <strong>n</strong> die Breite (in Pixel) des Client-Fensterbereichs (das ist der Bereich ohne Rahmen, Titelleiste und <a href="#Menu">Menüleiste</a> des Fensters).</p>
<p><strong>Hn</strong>: Bestimme mit <strong>n</strong> die Höhe des Client-Fensterbereichs (in Pixel).</p>
<p><strong>Xn</strong>: Bestimme mit <strong>n</strong> die X-Position des Fensters auf dem Bildschirm (in Pixel). Position 0 ist die erste linke sichtbare Pixelspalte auf dem Bildschirm. </p>
<p><strong>Yn</strong>: Bestimme mit <strong>n</strong> die Y-Position des Fensters auf dem Bildschirm (in Pixel). Position 0 ist die erste obere sichtbare Pixelzeile auf dem Bildschirm.</p>
<p><strong>Center</strong>: Zentriert das Fenster horizontal und vertikal auf dem Bildschirm.</p>
<p> <strong>xCenter</strong>: Zentriert das Fenster horizontal auf dem Bildschirm. Zum Beispiel: <code>Gui, Show, xCenter y0</code>.</p>
<p><strong>yCenter</strong>: Zentriert das Fenster vertikal auf dem Bildschirm.</p>
<p><strong><a name="AutoSize"></a>AutoSize</strong>: Passt die Fenstergröße an den Steuerelementen an, die zurzeit sichtbar sind. Das ist nützlich, um die Fenstergröße anzupassen, nachdem neue Steuerelemente hinzugefügt oder Größe und Sichtbarkeit vorhandener Steuerelemente geändert worden sind. Zum Beispiel:<br>
  <code>Gui, Show, AutoSize Center</code></p>
<p><br>
  <em><strong>Eine der folgenden Optionen kann auch vorhanden sein:</strong></em></p>
<p><strong>Minimize</strong>: Minimiert das Fenster und aktiviert das darunterliegende Fenster.</p>
<p><strong>Maximize</strong>: Maximiert und aktiviert das Fenster.</p>
<p><strong>Restore</strong>: Hebt die Maximierung oder Minimierung des Fensters auf, falls notwendig. Zudem wird das Fenster je nach Bedarf angezeigt und aktiviert.</p>
<p><strong>NoActivate</strong>: Hebt die Maximierung oder Minimierung des Fensters auf, falls notwendig. Zudem wird das Fenster angezeigt, ohne es zu aktivieren.</p>
<p><strong>NA</strong>: Zeigt das Fenster an, ohne es zu aktivieren. Ist das Fenster minimiert, wird dieser Zustand beibehalten, steigt aber in der Z-Rangordnung nach oben (die Rangordnung kann im Alt-Tab-Fenster überprüft werden). Wurde das Fenster vorher versteckt, führt das wahrscheinlich dazu, dass es über dem aktiven Fenster erscheint, selbst wenn das aktive Fenster nicht deaktiviert ist.</p>
<p><strong>Hide</strong>: Versteckt das Fenster und aktiviert das darunterliegende Fenster. Prinzipiell funktioniert es wie <a href="#Cancel">Gui Cancel</a>. Allerdings hat diese Option den Vorteil, dass ein verstecktes Fenster verschoben, skaliert oder dessen Titel geändert werden kann, ohne dass es angezeigt werden muss. Zum Beispiel: <code>Gui, Show, Hide x55 y66 w300 h200, Neuer Titel</code>.</p>

<h2 id="Submit">Gui, Submit [, NoHide]</h2>
<p>Speichert den Inhalt von jedem Steuerelement in die <a href="#var">zugewiesene Variable</a> (falls vorhanden) und versteckt das Fenster, solange die NoHide-Option nicht vorhanden ist. Bei Steuerelementen, die mehrere Ausgabefelder erzeugen, wie eine <a href="GuiControls.htm#ListBoxMulti">Mehrfachauswahl-ListBox</a>, verwendet die Ausgabe das <a href="#Delimiter">aktuelle Begrenzungszeichen</a> des Fensters. Wenn das Fenster nicht vorhanden ist (da es z. B. per <a href="#Destroy">Gui Destroy</a> zerstört worden ist), bleibt dieser Befehl unwirksam.</p>

<h2 id="Cancel">Gui, Cancel</h2>
<p>Versteckt das Fenster, ohne dabei die Inhalte der Steuerelemente in die jeweils <a href="#var">zugewiesene Variable</a> zu speichern. Wenn das Fenster nicht vorhanden ist (da es z. B. per <a href="#Destroy">Gui Destroy</a> zerstört worden ist), bleibt dieser Befehl unwirksam.</p>

<h2 id="Destroy">Gui, Destroy</h2>
<p>Entfernt das Fenster (falls vorhanden) samt aller dazugehörigen Steuerelemente und gibt den entsprechenden Arbeitsspeicher sowie die Systemressourcen frei. Falls das Script später das Fenster neu erstellt, beginnen alle Fenstereigenschaften wie Farbe und Schriftart wieder mit ihren Standardwerten (als hätte das Fenster nie existiert). Wird <code>Gui Destroy</code> nicht verwendet, werden alle GUI-Fenster automatisch zerstört, sobald das Script beendet wird.</p>

<h2 id="Font">Gui, Font [, Optionen, Schriftart]</h2>
<p>Bestimmt die Schriftart, die Schriftgröße, den Schriftstil und/oder die Textfarbe für Steuerelemente, die nach diesem Befehl erstellt werden. Zum Beispiel:</p>
<pre>Gui, Font, s10, Verdana  <em>; Schriftart Verdana mit Größe 10.</em></pre>
<p>Lasse die letzten beiden Parameter weg, um die Standard-Schriftart, die Standard-Schriftgröße und die Standard-Textfarbe des Betriebssystems wiederherzustellen.</p>
<p><em>Schriftart</em> kann der Name einer beliebigen Schriftart sein (siehe <a href="../misc/FontsStandard.htm">Tabelle für Schriftarten</a>). Falls <em>Schriftart</em> weggelassen wird oder nicht im Betriebssystem vorhanden ist, wird die zuvor verwendete Schriftart weiter verwendet (bzw. die Standardschriftart des Betriebssystems, wenn keine vorhanden ist). Das hat den Vorteil, dass ein GUI-Fenster bei mehreren Betriebssystemen die gleiche Schriftart verwendet, selbst wenn die bevorzugte Schriftart auf einigen dieser Systeme fehlt. Im folgenden Beispiel hat Verdana Vorrang vor Arial, welches wiederum Vorrang vor MS Sans Serif hat:</p>
<pre>Gui, Font,, MS sans serif
Gui, Font,, Arial
Gui, Font,, Verdana  <em>; Bevorzugte Schriftart.</em></pre>
<p>Ist der <em>Optionen</em>-Parameter leer, werden die zuvor benutzten Schriftartattribute weiter verwendet. Ansonsten können ersatzweise beliebig viele der folgenden Optionsbuchstaben angegeben werden:</p>
<p><strong>C</strong>: Namen der Farbe (siehe <a href="../misc/Colors.htm">Farbtabelle</a>), ein RGB-Wert oder das Wort "Default", um die Standardfarbe des Betriebssystems wiederherzustellen (meistens schwarz). Beispielwerte: <code>cRed</code>, <code>cFFFFAA</code>, <code>cDefault</code>. Hinweis: <a href="GuiControls.htm#Button">Schaltflächen</a> ignorieren benutzerdefinierte Farben. Durch Einfügen der C-Option ist es möglich, ein bestimmtes Steuerelement zu erstellen, das eine andere Schriftfarbe hat. Zum Beispiel: <code>Gui, Add, Text, cRed, Eigener Text</code>.</p>
<p><strong>S</strong>: Größe (in Punkten). Zum Beispiel: <code>s12</code> (muss dezimal sein).</p>
<p><strong>W</strong>: Breite (Dicke). Eine Nummer zwischen 1 und 1000 (400 ist normal und 700 ist fett). Zum Beispiel: <code>w600</code> (muss dezimal sein).</p>
<p>Zudem werden folgende Wörter unterstützt: <strong>bold</strong>, <em>italic</em>, <s>strike</s>, <u>underline</u> und norm (übersetzt: fett, kursiv, durchgestrichen, unterstrichen und normal). <em>Norm</em> stellt die normale Breite/Dicke der Schrift wieder her und deaktiviert italic, strike und underline (Farbe und Größe bleiben jedoch erhalten). Es ist möglich, erst alle Attribute mit norm zu deaktivieren und danach neue Attribute hinzuzufügen. Mit <code>norm italic</code> beispielsweise wird die Schrift normalisiert und danach kursiv gemacht.</p>
<p>Sind mehr als eine Option notwendig, müssen diese jeweils mit einem Leerzeichen getrennt werden. Zum Beispiel: <code>cBlue s12 bold</code>.</p>
<p>Erstellt ein Script <a href="#MultiWin">mehrere GUI-Fenster</a>, wird sich jedes Fenster seine eigene "aktuelle Schriftart" zwecks Erstellung neuer Steuerelemente merken.</p>
<p>Das Betriebssystem bietet zudem Standard-Dialogfenster, die den Benutzer auffordern können, eine Farbe, eine Schriftart oder ein Icon auszuwählen. Diese Dialogfenster können per <a href="DllCall.htm">DllCall()</a> angezeigt werden, siehe dazu <a href="http://www.autohotkey.com/forum/topic17230.html">www.autohotkey.com/forum/topic17230.html</a>.</p>
<p id="fontq"><strong>Q</strong>: Text rendering quality. Zum Beispiel: <code>q3</code>. Nach Q sollte eine Zahl aus der folgenden Tabelle erfolgen:</p>
<table class="info">
  <tr><td>0 = DEFAULT_QUALITY</td><td>Die Darstellung der Schriftart spielt keine Rolle.</td></tr>
  <tr><td>1 = DRAFT_QUALITY</td><td>Die Darstellung der Schriftart ist ein wenig unwichtiger als wie bei PROOF_QUALITY.</td></tr>
  <tr><td>2 = PROOF_QUALITY</td><td>Die Zeichenqualität der Schriftart ist wichtiger als die exakte Übereinstimmung mit logischen Schriftattributen (z. B. fett, kursiv und so weiter).</td></tr>
  <tr><td>3 = NONANTIALIASED_QUALITY</td><td>Schrift wird nicht geglättet.</td></tr>
  <tr><td>4 = ANTIALIASED_QUALITY</td><td>Schrift wird geglättet, wenn die Schriftart so etwas unterstützt und deren Größe nicht zu klein und nicht zu groß ist.</td></tr>
  <tr><td>5 = CLEARTYPE_QUALITY</td><td>Windows XP und höher: Der Text wird gegebenenfalls mithilfe der ClearType-Kantenglättung dargestellt.</td></tr>
</table>
<p>Um mehr darüber zu erfahren, was diese Werte bedeuten, siehe <a href="http://msdn.microsoft.com/en-us/library/dd183499.aspx">MSDN: CreateFont</a>.</p>
<p>Standardmäßig gilt die höchste Qualitätseinstellung. Deshalb wird dieses Feature eher dazu verwendet, Kantenglättung zu deaktivieren, um den Text bei bestimmten Fällen besser lesbar zu machen.</p>
<h2 id="Color">Gui, Color [, Fensterfarbe, Steuerelementfarbe]</h2>
<p>Bestimmt die Hintergrundfarbe des Fensters und/oder dessen Steuerelemente. Mit <em>Fensterfarbe</em> wird der Hintergrund des Fensters selbst bestimmt. <em>Steuerelementfarbe</em> gilt für alle gegenwärtigen und zukünftigen Steuerelemente im Fenster (beachte dabei, dass einige Steuerelemente benutzerdefinierte Farben nicht unterstützen). Obwohl <em>Steuerelementfarbe</em> anfangs von <a href="ListView.htm">ListView</a>- und <a href="TreeView.htm">TreeView</a>-Steuerelemente beachtet wird, sind nachfolgende Änderungen der <em>Steuerelementfarbe</em> nicht mehr möglich. In solchen Fällen kann <code>GuiControl +BackgroundFF9977, EigeneListview</code> verwendet werden, um die Farbe direkt zu ändern.</p>
<p>Lass den entsprechenden Parameter leer, wenn die aktuelle Farbe beibehalten werden soll. Ansonsten kann man eine Hauptfarbe aus der <a href="../misc/Colors.htm">HTML-Farbtabelle</a>, ein 6-stelliger RGB-Wert (0x-Präfix ist optional) oder das Wort "Default" für die Standardfarbe angegeben. Beispielwerte: <code>Silver</code>, <code>FFFFAA</code>, <code>0xFFFFAA</code>, <code>Default</code>.</p>
<p>Standardmäßig ist die Hintergrundfarbe des Fensters die Systemfarbe der Schaltflächen, und die Hintergrundfarbe des Steuerelements standardmäßig die Systemfarbe des Fensters (üblicherweise weiß).</p>
<p>Die Farbe der <a href="#Menu">Menüleiste</a> und deren Untermenüs kann wie folgt geändert werden: <code><a href="Menu.htm">Menu</a>, EigeneMenüleiste, Color, White</code>.</p>
<p>Um den Hintergrund transparent zu machen, verwende <a href="WinSet.htm#TransColor">WinSet TransColor</a>. Macht man das allerdings, ohne vorher ein benutzerdefiniertes Fenster per <a href="#Color">Gui Color</a> zugewiesen zu haben, werden die Schaltflächen ebenfalls transparent. Man kann das verhindern, wenn man zunächst eine benutzerdefinierte Fensterfarbe zuweist und diese dann transparent macht. Zum Beispiel:</p>
<pre>Gui, Color, EEAA99
Gui +LastFound  <em>; Macht das GUI-Fenster zum <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenen Fenster</a>.</em>
WinSet, TransColor, EEAA99</pre>
<p>Wenn der Rahmen und die Titelleiste eines Fensters mit transparentem Hintergrund zusätzlich entfernt werden soll, kann folgendes verwendet werden, <strong>nachdem</strong> das Fenster transparent gemacht worden ist:</p>
<pre>Gui -Caption  <em>; Oder <i>"Gui, GuiName:-Caption"</i>, falls es nicht das <a href="#DefaultWin">Standardfenster</a> ist.</em></pre>
<p>Die oben genannte Methode wird durch die Bildschirmanzeige (OSD) weiter unten nochmals näher gebracht.</p>

<h2 id="Margin">Gui, Margin [, X, Y]</h2>
<p><strong>X</strong> und <strong>Y</strong> bestimmen die Anzahl an Pixeln, die einen Freiraum an der linken/rechten und oberen/unteren Seite bilden, falls Steuerelemente automatisch positioniert werden, denen eindeutig die <a href="#XY">Koordinaten X und Y</a> fehlen. Außerdem werden diese Abstände dazu verwendet, den vertikalen und horizontalen Abstand zwischen den automatisch positionierten Steuerelementen festzulegen. Die Abstände zur Berechnung der Fenstergröße werden berücksichtigt, sobald <a href="#Show">Gui Show</a> das erste Mal verwendet wird (falls keine eindeutige Größe angegeben worden ist).</p>
<p>Falls dieser Befehl nicht verwendet wird, erhält das Fenster automatisch an jeder Seite einen Standardabstand, sobald das erste Steuerelement hinzugefügt wird. Dieser Abstand wird proportional zur Größe der aktuell ausgewählten <a href="#Font">Schriftart</a> sein (0.75 x Schrifthöhe für Unten &amp; Oben, 1.25 x Schriftbreite für Links &amp; Rechts).</p>
<p>Die Abstände können geändert werden, während Steuerelemente hinzugefügt werden. Allerdings werden solche Änderungen nur für Steuerelemente wirksam, die nachträglich hinzugefügt werden, nicht für solche, die bereits vorhanden sind. Man kann entweder X oder Y leer lassen, um den entsprechenden Abstand unverändert zu lassen.</p>

<h2 id="Options">Gui, +/-Option1 +/-Option2 ...</h2>
<p>Nach dem GUI-Befehl können eine oder mehrere Optionen angegeben werden. Aus Performance-Gründen ist es besser, alle Optionen auf einer Zeile zu setzen, bevor das Fenster erstellt wird (das heißt, bevor andere Unterbefehle wie <a href="#Add">Gui Add</a> verwendet werden).</p>
<p>Der Effekt des Befehls ist kumulativ (summierend). Das heißt, dass dieser Befehl nur Einstellungen ändert, die direkt angegeben worden sind, alle anderen bleiben unverändert.</p>
<p>Mit einem Plus- oder Minuszeichen kann eine Option jeweils hinzugefügt oder entfernt werden. Zum Beispiel:</p>
<pre>Gui +Resize -MaximizeBox  <em>; Ändert die Einstellungen des <a href="#DefaultWin">Standard</a>-GUI-Fensters.</em>
Gui <strong>EigenesGui:</strong>+Resize -MaximizeBox  <em>; Ändert die Einstellungen des GUI's namens <i>EigenesGui</i>.</em></pre>
<p><strong>AlwaysOnTop</strong>: Bewirkt, dass das Fenster immer über allen anderen Fenstern bleibt, was den gleichen Effekt hat wie <a href="WinSet.htm#AlwaysOnTop">WinSet AlwaysOnTop</a>.</p>
<p> <strong>Border</strong>: Stattet das Fenster mit einem dünnen Rahmen aus. Das ist unüblich.</p>
<p><strong>Caption</strong> (standardmäßig vorhanden): Stattet das Fenster mit einer Titelleiste und einem dicken Rahmen aus. Soll die Titelleiste eines Fensters entfernt werden, das <a href="WinSet.htm#TransColor">WinSet TransColor</a> verwenden wird, sollte man diese erst entfernen, wenn TransColor bereits gesetzt worden ist.</p>
<p><strong><a name="Delimiter"></a>Delimiter</strong>: Bestimmt, dass das Fenster anstelle des senkrechten Striches (|) ein anderes Zeichen verwenden soll, sobald Inhalte von Steuerelementen mit <a href="#Add">Gui Add</a> hinzugefügt, mit <a href="GuiControl.htm">GuiControl</a> bearbeitet oder mit <a href="#Submit">Gui Submit</a> bzw. <a href="GuiControlGet.htm">GuiControlGet</a> ermittelt werden. Füge das gewünschte Trennzeichen unmittelbar nach dem Wort Delimiter an. Zum Beispiel würde <code>Gui +Delimiter`n</code> ein Zeilenumbruchszeichen verwenden, das sich besonders gut für <a href="../Scripts.htm#continuation">Fortsetzungsbereiche</a> eignen könnte. <code>Gui +Delimiter|</code> würde das Standardtrennzeichen wiederherstellen. Wenn ein Leer- oder Tabulatorzeichen notwendig ist, sollte man <code>Gui +DelimiterSpace</code> oder <code>Gui +DelimiterTab</code> angeben. Wurde das Trennzeichen einmal geändert, beeinflusst diese Option alle vorhandenen und nachfolgenden <a href="../misc/Threads.htm">Threads</a>, die dieses bestimmte Fenster bearbeiten.</p>
<p><strong>Disabled</strong>: Deaktiviert das Fenster, wodurch der Benutzer nicht länger mit den Steuerelementen interagieren kann. Diese Option wird oft bei Fenstern benutzt, die untergeordnete Fenster haben (siehe <a href="#Owner">Owner</a>).</p>
<p id="DPIScale"><strong>DPIScale</strong>: Use <code>Gui -DPIScale</code> to disable DPI scaling, which is enabled by default. Falls die DPI-Skalierung auf einem System mit nicht-standardmäßiger DPI-Einstellung aktiviert ist, werden die Gui-Befehle Koordinaten und Größen automatisch skalieren, um den Steuerelementen die scheinbar fast gleiche Größe (aber höhere Auflösung) zuzuweisen. For example, with a DPI of 144 (150%), <code>Gui Show, w100</code> would make the Gui 150 pixels wide, but <a href="../Variables.htm#GuiWidth">A_GuiWidth</a> would still return 100. <a href="../Variables.htm#ScreenDPI">A_ScreenDPI</a> contains the system's current DPI.</p>
<p id="GuiHwndOutputVar"><strong>Hwnd</strong><em>OutputVar</em> This option stores the window handle (HWND) of the GUI in <em>OutputVar</em>. Zum Beispiel: <code>Gui +HwndMyGuiHwnd</code>. When within a function, <em>MyGuiHwnd</em> is treated as a <a href="../Functions.htm#DynVar">function dynamic variable</a>. A GUI's HWND is often used with <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a>, and <a href="DllCall.htm">DllCall</a>. It can also be used directly as an <a href="../misc/WinTitle.htm#ahk_id">ahk_id WinTitle</a> or in place of a GUI name; for example, <code>Gui %MyGuiHwnd%:Destroy</code>.</p>
<p><strong><a name="PlusLabel"></a>Label</strong> Sets custom names for this window's <a href="#Labels">special labels</a>. For example, <code>Gui MyGui:+LabelMyGui_On</code> would use the labels MyGui_OnClose and MyGui_OnSize (if they exist) instead of MyGuiGuiClose and MyGuiGuiSize. In other words, the string "MyGuiGui" is replaced by "MyGui_On" in the names of all <a href="#Labels">special labels</a>. This can also be used to make multiple windows share the same set of labels (in which case the script may consult <a href="../Variables.htm#Gui">A_Gui</a> to determine which window launched the subroutine).</p>
<p><strong><a name="LastFound"></a>LastFound</strong>: Markiert das aktuelle Fenster als <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundenes Fenster</a> (das in einem <a href="#DefaultWin">GUI-Thread</a> unnötig ist, weil das automatisch geschieht), wodurch Befehle wie <a href="WinSet.htm">WinSet</a> die Möglichkeit haben, das Fenster zu bearbeiten, selbst wenn es versteckt ist (das heißt, dass <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> nicht notwendig ist). Das ist besonders dann nützlich, wenn die Eigenschaften des Fensters geändert werden sollen, bevor es angezeigt wird. Zum Beispiel:</p>
<pre>Gui +LastFound
WinSet, TransColor, %BeliebigeFarbe% 150
Gui Show</pre>
<p><strong><a name="LastFoundExist"></a>LastFoundExist</strong>: Unlike other options, LastFoundExist is recognized only when no other options appear on the same line. <em>+LastFoundExist</em> is the same as <em>+LastFound</em> except that the window is not created if it does not already exist. Der Hauptnutzen davon ist es, zu erkennen, ob ein bestimmtes GUI-Fenster bereits vorhanden ist. Zum Beispiel:</p>
<pre>Gui EigenesGui:+LastFoundExist
IfWinExist
    MsgBox GUI "EigenesGui" existiert bereits.</pre>
<p><strong>MaximizeBox</strong>: Aktiviert den Maximieren-Button in der Titelleiste. Diese Option ist bei <em>Resize</em> inbegriffen. </p>
<p><strong>MinimizeBox</strong> (standardmäßig vorhanden): Aktiviert den Minimieren-Button in der Titelleiste.</p>
<p><strong><a name="MinSize"></a>MinSize</strong> and <strong>MaxSize</strong>: Determines the minimum and/or maximum size of the window, such as when the user drags its edges to resize it. Specify the word <em>MinSize</em> and/or <em>MaxSize</em> with no suffix to use the window's current size as the limit (if the window has no current size, it will use the size from the first use of <a href="#Show">Gui Show</a>). Ansonsten kann Breite mal Höhe angegeben werden: <code>Gui +Resize +MinSize640x480</code>. The dimensions are in pixels, and they specify the size of the window's client area (which excludes borders, title bar, and <a href="#Menu">menu bar</a>). Jede Zahlenangabe muss dezimal sein, nicht hexadezimal.</p>
<p>Man kann eine der Abmessungen weglassen, um diese unverändert zu lassen (z. B. <code>+MinSize640x</code> oder <code>+MinSizex480</code>). Weiterhin kann man Min/MaxSize mehrmals angeben, um die aktuelle Fenstergröße für eine Abmessung und eine eindeutige Größe für die andere Abmessung zu verwenden. Zum Beispiel würde <code>+MinSize +MinSize640x</code> die aktuelle Fenstergröße für die Höhe und 640 für die Breite verwenden.</p>
<p>Wenn <em>MinSize</em> und <em>MaxSize</em> nie verwendet werden, gelten die Standardwerte des Betriebssystems (ähnlich wie <code>Gui -MinSize -MaxSize</code>, das diese Standardwerte wiederherstellen kann). Hinweis: das Fenster muss <a href="#Resize">+Resize</a> haben, damit dessen Größe vom Benutzer geändert werden kann.</p>
<p><strong><a name="OwnDialogs"></a>OwnDialogs</strong>: <code>Gui +OwnDialogs</code> should be specified in each <a href="../misc/Threads.htm">thread</a> (such as a ButtonOK subroutine) for which subsequently displayed <a href="MsgBox.htm">MsgBox</a>, <a href="InputBox.htm">InputBox</a>, <a href="FileSelect.htm">FileSelect</a>, and <a href="DirSelect.htm">DirSelect</a> dialogs should be owned by the window. Solche Dialogfenster werden dabei modal. Das heißt, dass der Benutzer erst wieder mit dem GUI-Fenster interagieren kann, wenn das Dialogfenster geschlossen wird. By contrast, <a href="ToolTip.htm">ToolTip</a> windows do not become modal even though they become owned; they will merely stay always on top of their owner. In either case, any owned dialog or window is automatically destroyed when its GUI window is <a href="#Destroy">destroyed</a>.</p>
<p>Normalerweise ist es nicht notwendig, diese Einstellung wieder zu deaktivieren, weil sie keine Auswirkung auf andere <a href="../misc/Threads.htm">Threads</a> hat. Muss ein Thread sowohl untergeordnete als auch nicht-untergeordnete Dialogfenster anzeigen, kann er diese Einstellung per <code>Gui -OwnDialogs</code> deaktivieren.</p>
<p>Wenn ein Fensternamepräfix nicht angegeben worden ist (weil beispielsweise <code>Gui +OwnDialogs</code> anstatt <code>Gui EigenesGui:+OwnDialogs</code> verwendet wird), werden die Dialogfenster dem <a href="#DefaultWin">Standardfenster des Threads</a> untergeordnet.</p>
<p><strong><a name="Owner"></a>Owner</strong>: Verwende <em>+Owner</em>, um das Fenster einem anderen unterzuordnen. Ein untergeordnetes Fenster hat standardmäßig keine eigenen Taskleistenschaltflächen. Ist das Fenster sichtbar, befindet sich es immer im Vordergrund. Dieses Fenster wird automatisch zerstört, sobald das dazugehörige GUI-Fenster zerstört wird. <em>+Owner</em> can be used before or after the owned window is created. There are two ways to use <em>+Owner</em>, as shown below:</p>
<pre>Gui, EigenesGui:+OwnerAnderesGui  <em>; <i>EigenesGui</i> wird <i>AnderesGui</i> untergeordnet.</em>
Gui, EigenesGui:+Owner  <em>; <i>EigenesGui</i> wird dem <a href="Menu.htm#MainWindow">Hauptfenster des Scripts</a> untergeordnet, um die Schaltfläche in der Taskleiste zu unterdrücken.</em></pre>
<p><code>+Owner</code> can be immediately followed by the <a href="#Name">name</a> or number of an existing Gui or the <a href="WinGet.htm#ID">HWND</a> of any top-level window.</p>
<p>Soll die Interaktion des Benutzers mit dem übergeordneten Fenster unterbunden werden, während ein untergeordnetes Fenster sichtbar ist, muss das übergeordnete Fenster mit <code>Gui +Disabled</code> deaktiviert werden. Sobald das untergeordnete Fenster geschlossen oder zerstört wird, kann das übergeordnete Fenster wieder mit <code>Gui -Disabled</code> aktiviert werden. Mache das, bevor das Fenster geschlossen bzw. zerstört wird, so dass das übergeordnete Fenster wieder automatisch aktiviert werden kann.</p>
<p><strong><a name="Parent"></a>Parent</strong>: Use <code>+Parent</code> immediately followed by the <a href="#Name">name</a> or number of an existing Gui or the <a href="WinGet.htm#ID">HWND</a> of any window or control to use it as the parent of this window. To convert the Gui back into a top-level window, use <code>-Parent</code>. Diese Option funktioniert auch, nachdem das Fenster erstellt wurde.</p>
<p><strong><a name="Resize"></a>Resize</strong>: Macht das Fenster skalierbar und aktiviert den Maximieren-Button in der Titelleiste. Um das Aktivieren des Buttons zu unterdrücken, verwende <code>+Resize -MaximizeBox</code>.</p>
<p><strong>SysMenu</strong> (standardmäßig vorhanden): Verwende <code>-SysMenu</code>, um das Systemmenü und Icon in der oberen linken Ecke des Fensters zu entfernen, und den Minimieren-, Maximieren- und Schließen-Button auszublenden.</p>
<p><strong><a name="Theme"></a>Theme</strong>: Verwende <code>-Theme</code>, um allen nachfolgenden Steuerelementen im Fenster das klassische Design zuzuweisen (nur ab Windows XP). Sollen danach weitere Steuerelemente unter Berücksichtigung des neuen Designs erstellt werden, verwende <code>+Theme</code>. Hinweis: Diese Option funktioniert nicht, wenn das Betriebssystem älter als Windows XP ist, oder wenn in Windows XP selbst das klassische Design aktiv ist. Soll diese Einstellung nur für ein bestimmtes Steuerelement geändert werden, schreibe <code>+Theme</code> oder <code>-Theme</code> in dessen Optionen, sobald es erstellt wird.</p>
<p><strong>ToolWindow</strong>: Stattet das Fenster mit einer schmalen Titelleiste aus, aber ohne Taskleistenschaltfläche.</p>
<p><strong>(Unbenannter Style)</strong>: Verwende ein Plus- oder Minuszeichen, gefolgt von einer dezimalen oder hexadezimalen <a href="../misc/Styles.htm">Style-Nummer</a>.</p>
<p><strong>(Unbenannter ExStyle)</strong>: Verwende ein Plus- oder Minuszeichen, gefolgt von dem Buchstaben "E" und einer dezimalen oder hexadezimalen erweiterten Style-Nummer. Zum Beispiel würde <code>+E0x40000</code> den WS_EX_APPWINDOW-Style hinzufügen, wodurch das Fenster eine Taskleistenschaltfläche erhält, die ansonsten fehlen würde. Weitere nicht-dokumentierte Styles findet man auf <a href="http://www.microsoft.com">www.microsoft.com</a> mit Suchbegriffen wie WS_EX_APPWINDOW.</p>

<h2 id="Menu">Gui, Menu [, Menüname]</h2>
<p>Befestigt eine Menüleiste an das Fenster. Verwende dazu den <a href="Menu.htm">Menu</a>-Befehl, um ein normales Menü zu erstellen. Zum Beispiel:</p>
<pre>Menu, Dateimenü, Add, Ö&amp;ffnen<a href="../misc/EscapeChar.htm">`t</a>Ctrl+F, MenüDateiÖffnen  <em>; Siehe untere Bemerkungen zu Ctrl+F.</em>
Menu, Dateimenü, Add, &amp;Beenden, MenuHandler
Menu, Hilfsmenü, Add, Inf&amp;o, MenuHandler
Menu, EigeneMenüleiste, Add, &amp;Datei, :Dateimenü  <em>; Fügt die oben erstellten Untermenüs hinzu.</em>
Menu, EigeneMenüleiste, Add, &amp;?, :Hilfsmenü
<strong>Gui, Menu, EigeneMenüleiste</strong></pre>
<p>Beachte in der obersten Zeile, dass nach <code>Ö&amp;ffnen</code> die Tastenkombination <code>Ctrl+F</code> erfolgt (mit einem Tabulatorzeichen dazwischen). Anstatt zum Menüpunkt zu navigieren, könnte der Benutzer einfach diese Tastenkombination drücken. If the shortcut uses only the standard modifier key names Ctrl, Alt and Shift, it is automatically registered as a <em>keyboard accelerator</em> for the GUI. Einzelzeichen-Zugriffstasten ohne Modifikatoren unterscheiden zwischen Groß- und Kleinschreibung und können durch ungewöhnliche Mitteln wie IME oder ALT+NNNN ausgelöst werden.</p>
<p>Soll eine bestimmte Tastenkombination nicht automatisch funktionieren, muss möglicherweise ein <a href="_IfWinActive.htm">kontextabhängiger Hotkey</a> verwendet werden. Beachte aber, dass solche Hotkeys üblicherweise nicht durch <a href="Send.htm">Send</a> ausgelöst werden können und dass sie eher andere Scripts stören, anstatt eine Standard-Zugriffstaste zu sein.</p>
<p>Soll die aktuelle Menüleiste eines Fensters entfernt werden, verwende <code>Gui Menu</code> (lasse den letzten Parameter weg).</p>
<p>Wurde ein Menü einmal als Menüleiste verwendet, sollte es nicht mehr als Popup-Menü oder Untermenü eingesetzt werden. Das liegt daran, dass Menüleisten intern ein anderes Format benötigen (allerdings gilt diese Einschränkung nur für die Menüleiste selbst, nicht für die Untermenüs). Soll diese Tatsache umgangen werden, erstelle ein Menü, das die Menüleiste sein soll, und das gleiche Menü nochmals, das etwas anderes sein soll.</p>
<p>Die Verwendung von destruktiven <a href="Menu.htm">Menu-Unterbefehlen</a> wie Delete und DeleteAll bei einem Menü, das zurzeit eine Menüleiste ist (und in einigen Fällen auch deren Untermenüs), wird nicht unterstützt und verursacht eine Fehlermeldung (sofern <a href="Menu.htm">UseErrorLevel</a> nicht aktiv ist). Führe die folgenden Schritte durch, um solche Änderungen vornehmen zu können: 1) Entferne die Menüleiste mit <code>Gui Menu</code> (lasse <em>Menüname</em> weg); 2) Führe die Änderungen durch; 3) Füge die Menüleiste mit <code>Gui, Menu, EigeneMenüleiste</code> wieder an.</p>

<h2 id="Minimize"><a name="Maximize"></a><a name="Restore"></a><a name="Hide"></a>Gui, Hide / Minimize / Maximize / Restore</h2>
<p><code>Gui Hide</code> ist das gleiche wie <a href="#Cancel">Gui Cancel</a>. Die anderen drei Befehle machen das Fenster wieder sichtbar (falls notwendig) und führen dann die entsprechenden Operationen aus. Ist das Fenster nicht vorhanden (da es beispielsweise durch <a href="#Destroy">Gui Destroy</a> zerstört wurde), werden diese Befehle nicht funktionieren.</p>

<h2 id="Flash">Gui, Flash [, Off]</h2>
<p>Lässt die Taskleistenschaltfläche des Fensters aufblinken. Dazu wird die Farbe der Titelleiste und/oder Taskleistenschaltfläche (falls vorhanden) invertiert. Das optionale Wort "OFF" bewirkt, dass die Titelleiste und Taskleistenschaltfläche ihre ursprünglichen Farben wiederherstellen (das Verhalten ist allerdings vom jeweiligen Betriebssystem abhängig). Im folgenden Beispiel wird das Fenster dreimal aufblinken, weil jeweils ein Paar von "Gui Flash" die Darstellung invertiert und wiederherstellt:</p>
<pre>Loop 6
{
    Gui Flash
    Sleep, 500  <em>; Dieser Wert ist ziemlich empfindlich; Änderungen können zu unerwarteten Ergebnissen führen.</em>
}</pre>

<h2 id="Default">Gui, GuiName:Default</h2>
<p>Ändert den <a href="#MultiWin">GUI-Standardfensternamen</a> des <a href="../misc/Threads.htm">aktuellen Threads</a>, der immer dann verwendet wird, wenn bei <a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a> und dem Gui-Befehl selbst kein Fenstername angegeben ist. Im folgenden Beispiel wird der Standardname des Fensters auf "EigenesGui" gesetzt: <code>Gui EigenesGui:Default</code>. In "<a href="#DefaultWin">Standardnummer eines Threads</a>" findet man mehr Informationen über das Standardfenster.</p>

<h2 id="Position">Positionierung und Layout mittels SmartGUI Creator </h2>
<p>Für einfache Layouts reichen die Optionen, die im nächsten Abschnitt beschrieben sind, vollkommen aus. Mit dem SmartGUI Creator von Rajat kann man auf einfache und visuelle Weise ein GUI-Fenster erstellen. Das heißt, dass das erstellt wird, was man sieht (WYSIWYG). Der SmartGUI Creator ist kostenlos und kann auf <a href="http://www.autohotkey.com/docs/SmartGUI/">www.autohotkey.com/docs/SmartGUI/</a> heruntergeladen werden.</p>

<h2 id="PosSize">Position und Größe von Steuerelementen anpassen</h2>
<p>Wenn man einige Abmessungen oder Koordinaten in <em>Optionen</em> weglässt, wird das Steuerelement relativ zum vorherigen Steuerelement positioniert und/oder dessen Größe abhängig vom Inhalt automatisch angepasst.</p>
<p>Die folgenden Optionen werden unterstützt:</p>
<p><strong><a name="R"></a>R</strong>: Textzeilen (kann eine Fließkommazahl wie bei R2.5 enthalten). <strong>R</strong> wird gegenüber <strong>H</strong> (Höhe) meist bevorzugt. Sind sowohl <strong>R</strong> als auch <strong>H</strong> vorhanden, wird <strong>R</strong> Vorrang haben. Bei einer GroupBox bestimmt diese Einstellung die Menge an Steuerelementen, für denen innerhalb der Box Platz geschaffen werden soll. Bei <a href="GuiControls.htm#DropDownList">DropDownLists</a>, <a href="GuiControls.htm#ComboBox">ComboBoxes</a> und <a href="GuiControls.htm#ListBox">ListBoxes</a> ist das die Anzahl an Einträgen, die gleichzeitig im Listenbereich sichtbar sein sollen (aber in Windows XP oder höher ist es oft besser, die Optionen <strong>R</strong> und <strong>H</strong> bei DropDownList und ComboBox wegzulassen, damit die aufklappbare Liste automatisch die verfügbare Höhe des Desktops ausnutzen kann). Bei allen anderen Steuerelementen ist <strong>R</strong> die Anzahl der Textzeilen, die sichtbar in das Steuerelement reinpassen sollen.</p>
<p><strong>W</strong>: Breite in Pixeln. Ist diese Option nicht vorhanden, berechnet sich die Breite bei einigen Steuerelementarten automatisch, basierend auf deren Inhalt. Alle anderen Steuerelementarten haben standardmäßig folgende Breiten:<br>
  Tab-Steuerelemente: Das 30-fache der aktuellen Schriftgröße, plus das 3-fache des <a href="#Margin">X-Abstands</a>.<br>
Vertikale ProgressBars: Das 2-fache der aktuellen Schriftgröße.<br>
Horizontale ProgressBars, horizontale Slider, DropDownLists, ComboBoxes, ListBoxes, GroupBoxes, Edits und Hotkeys: Das 15-fache der aktuellen Schriftgröße (außer GroupBoxes, die mit 18 multipliziert werden, um innerhalb der Abstände Platz zu schaffen).</p>
<p> <strong>H</strong>: Höhe in Pixeln. Fehlt sowohl <strong>H</strong> als auch <strong>R</strong>, verwenden DropDownLists, ComboBoxes, ListBoxes und leere mehrzeilige Edit-Steuerelemente standardmäßig eine Höhe von 3 Zeilen; GroupBoxes standardmäßig 2 Zeilen; vertikale Slider und ProgressBars standardmäßig 5 Zeilen; horizontale Slider standardmäßig 30 Pixel (außer wenn eine Dicke angegeben wurde); horizontale ProgressBars standardmäßig das 2-fache der aktuellen Schriftgröße; Hotkey-Steuerelemente standardmäßig 1 Zeile; und Tab-Steuerelemente standardmäßig 10 Zeilen. Bei allen anderen Steuerelementen berechnet sich die Höhe automatisch, basierend auf deren Inhalt. Beachte, dass sich <strong>H</strong> bei DropDownLists und ComboBoxes aus dem immer sichtbaren Teil und dem dazugehörigen Listenbereich zusammensetzt (selbst wenn die Höhe zu niedrig ist, wird mindestens immer ein Element in der Liste angezeigt). Auch hier gilt, dass man <strong>R</strong> anstelle von <strong>H</strong> bevorzugen sollte, weil es ein Steuerelement daran hindern kann, unvollständige Textzeilen darzustellen.</p>
<p><strong>wp+n</strong>, <strong>hp+n</strong>, <strong>wp-n</strong> und <strong>hp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) können dazu verwendet werden, die Abmessungen eines Steuerelements an die Abmessungen des zuvor hinzugefügten Steuerelements anzupassen, optional mit einem Plus- oder Minuszeichen. Zum Beispiel würde <code>wp</code> die Breite eines Steuerelements auf die Breite des vorherigen Steuerelements setzen, und <code>wp-50</code> würde die Breite des vorherigen Steuerelements verwenden, subtrahiert mit 50.</p>
<p><strong><a name="XY"></a>X</strong>: X-Position. Zum Beispiel würde <code>x0 y0</code> das Steuerelement in die obere linke Ecke des Client-Bereichs positionieren (das ist der Fensterbereich ohne Rahmen, Titelleiste und Menüleiste). Ist <strong>Y</strong> vorhanden und <strong>X</strong> nicht, wird das Steuerelement auf die rechte Seite der zuvor eingefügten Steuerelementen positioniert, als würde eine neue "Spalte" beginnen.</p>
<p><strong>Y</strong>: Y-Position. Ist <strong>X</strong> vorhanden und <strong>Y</strong> nicht, wird das Steuerelement auf die untere Seite der zuvor eingefügten Steuerelementen positioniert, als würde eine neue "Zeile" beginnen. </p>
<p>Omitting either <strong>X, </strong><strong>Y</strong> or both is useful to make a GUI layout automatically adjust to any future changes you might make to the size of controls or font. Wenn dagegen bei jedem Steuerelement ein absoluter Wert angegeben worden ist, muss man die Position von allen Steuerelementen, die sich darunter oder daneben befinden, manuell verschieben.</p>
<p>Ist <strong>X</strong> und <strong>Y</strong> nicht vorhanden, wird das Steuerelement unterhalb des vorherigen Steuerelements positioniert, basierend auf den voreingestellten Innenabstand.</p>
<p><a name="PosPlus"></a>Bei Bedarf kann bei <strong>X</strong> und <strong>Y</strong> ein Pluszeichen eingefügt werden, um ein Steuerelement relativ zum rechten oder unteren Rand des zuvor eingefügten Steuerelements zu positionieren. Zum Beispiel würde <code>Y+10</code> das Steuerelement 10 Pixel unter dem vorherigen Steuerelement positionieren, anstatt den voreingestellten Innenabstand zu verwenden. <code>X+10</code> würde das Steuerelement 10 Pixel rechts neben dem vorherigen Steuerelement positionieren. Da negative Zahlen wie <code>X-10</code> für die absolute Positionierung vorbehalten sind, ist es für einen negativen Offset notwendig, ein Pluszeichen davor einzufügen. Zum Beispiel: <code>X+-10</code>.</p>
<p><strong>xp+n</strong>, <strong>yp+n</strong>, <strong>xp-n</strong> und <strong>yp-n</strong> (wobei <strong>n</strong> eine beliebige Zahl ist) können dazu verwendet werden, Steuerelemente relativ zur linken oberen Ecke des vorherigen Steuerelements zu positionieren, um beispielsweise Steuerelemente in einer <a href="GuiControls.htm#GroupBox">GroupBox</a> einzuschließen.</p>
<p><strong>xm</strong> und <strong>ym</strong> können dazu verwendet werden, ein Steuerelement jeweils am linken und rechten <a href="#Margin">Abstand</a> des Fensters zu positionieren (nach diesen Optionen kann ein Plus-/Minuszeichen und eine Zahl folgen). Wenn <strong>ym</strong> verwendet wird, ohne eine X-Position angegeben zu haben, wird das Steuerelement am oberen Abstand positioniert, aber auf der rechten Seite von allen zuvor eingefügten Steuerelementen, als würde eine neue "Spalte" beginnen. Umgekehrt gilt das gleiche (xs ohne Y-Position).</p>
<p><a name="xs"></a><strong>xs</strong> und <strong>ys</strong> these are similar to <strong>xm</strong> and <strong>ym </strong>except that they refer to coordinates that were saved by having previously added a control with the word <a href="#Section">Section</a> in its options (the first control of the window always starts a new section, even if that word isn't specified in its options). Wenn <strong>ys</strong> verwendet wird, ohne eine X-Position angegeben zu haben, wird das Steuerelement auf die zuvor gespeicherte Y-Position positioniert, aber auf der rechten Seite von allen Steuerelementen, die seit der letzten Verwendung von <a href="#Section">Section</a> hinzugefügt worden sind; als würde eine neue "Spalte" innerhalb der Sektion beginnen. Zum Beispiel:</p>
<pre>Gui, Add, Edit, w600  <em>; Fügt ein breites Eingabefeld am oberen Rand des Fensters hinzu.</em>
Gui, Add, Text, <strong>Section</strong>, Vorname:  <em> ; Speichert die Position des Steuerelements und beginnt eine neue Sektion.</em>
Gui, Add, Text,, Nachname:
Gui, Add, Edit, <strong>ys</strong>  <em>; Beginnt eine neue Spalte innerhalb dieser Sektion.</em>
Gui, Add, Edit
Gui, Show</pre>
<p>Umgekehrt gilt das gleiche (<strong>xs</strong> ohne Y-Position).</p>
<p>Bei Bedarf kann nach <strong>xs</strong> und <strong>ys</strong> ein Plus-/Minuszeichen und eine Zahl erfolgen. Außerdem ist es möglich, gleichzeitig das Wort <a href="#Section">Section</a> und xs/ys in den Optionen des Steuerelements anzugeben, wodurch es die vorherige Position noch für sich selbst verwendet, aber für nachfolgende Steuerelemente eine neue Sektion erstellt.</p>

<h2 id="Events">Speichern von und Reagieren auf Benutzereingaben</h2>
<p><strong><a name="var"></a>V</strong>: Variable. Verbindet eine Variable mit einem Steuerelement. Immediately after the letter V, specify the name of a global variable (or a <a href="../Functions.htm#ByRef">ByRef local</a> that points to a global, or a <a href="../Functions.htm#static">static variable</a>). Zum Beispiel würde <code><strong>v</strong>EigenesEdit</code> den Inhalt des Steuerelements in die Variable <em>EigenesEdit</em> speichern, sobald <a href="#Submit">Gui</a> Submit verwendet wird. If a control is not input-capable -- such as a Text control or GroupBox -- associating a variable with it can still be helpful since that variable's name serves as the control's unique identifier for use with <a href="GuiControl.htm">GuiControl, </a><a href="GuiControlGet.htm">GuiControlGet</a>, and <a href="../Variables.htm#GuiControl">A_GuiControl</a>. Hinweis: <a href="#Submit">Gui Submit</a> ändert weder die Inhalte der Variablen von nicht-eingabefähigen Steuerelementen (z. B. Text oder GroupBox), noch von anderen, wie in ihren Sektionen beschrieben (z. B. <a href="ListView.htm">ListView</a> und <a href="TreeView.htm">TreeView</a>).</p>
<p><strong><a name="label"></a>G</strong>: Gosub (g-label). Startet automatisch eine Subroutine, wenn der Benutzer ein Steuerelement anklickt oder ändert. Gebe nach dem Buchstaben G den Namen des <a href="../misc/Labels.htm">Labels</a> an, das ausgeführt werden soll. Man kann <code>gCancel</code> angeben, um ein indirektes <a href="#Cancel">Gui Cancel</a> durchzuführen (aber falls ein Label namens "Cancel" im Script bereits vorkommt, wird dieser stattdessen ausgeführt). Die Subroutine kann auf folgende interne Variablen zurückgreifen: <a href="../Variables.htm#Gui">A_Gui</a>, <a href="../Variables.htm#GuiControl">A_GuiControl</a>, <a href="../Variables.htm#GuiEvent">A_GuiEvent</a> und <a href="../Variables.htm#EventInfo">A_EventInfo</a>.</p>
<h2 id="OtherOptions">Steuerelemente: Gewöhnliche Styles und Optionen</h2>
<p>Hinweis: Vorzeichenlose Eigenschaften werden standardmäßig hinzugefügt; zum Beispiel ist <code>Wrap</code> das gleiche wie <code>+Wrap</code>. Dagegen würde <code>-Wrap</code> die Eigenschaft zur Zeilenumbrechung entfernen.</p>
<p><strong><a name="AltSubmit"></a>AltSubmit</strong>: Verwendet eine alternative Übermittlungsmethode. Bei DropDownList, ComboBox oder ListBox bewirkt <a href="#Submit">Gui Submit</a>, dass die Position des ausgewählten Elements gespeichert wird, anstatt dessen Text. ComboBox: Ist kein Element ausgewählt, wird der Text im Eingabefeld abgespeichert; DropDownList oder ListBox: Ist kein Element ausgewählt, werden ihre <a href="#var">zugewiesenen Ausgabevariablen</a> leer gemacht. Hinweis: AltSubmit beeinflusst auch das Verhalten von <a href="GuiControlGet.htm">GuiControlGet</a>, wenn der Inhalt von solchen Steuerelementen abgerufen wird.</p>
<p><strong>C</strong>: Farbe des Textes (funktioniert nicht bei <a href="GuiControls.htm#Button">Buttons</a>). Gebe nach dem Buchstaben C den Namen einer Farbe (siehe <a href="../misc/Colors.htm">Farbtabelle</a>) oder ein RGB-Wert an (das 0x-Präfix ist optional). Beispiele: <code>cRed</code>, <code>cFF2211</code>, <code>c0xFF2211</code>, <code>cDefault</code>.</p>
<p><strong>Disabled</strong>: Zeigt ein eingabefähiges Steuerelement in seinem deaktivierten Zustand an, wodurch der Benutzer das Steuerelement weder fokussieren noch dessen Inhalt ändern kann. Verwende <a href="GuiControl.htm#Enable">GuiControl Enable</a>, um es später wieder zu aktivieren. Hinweis: Um die Eingabemöglichkeit eines Edit-Steuerelements zu unterdrücken, ist der String <code>ReadOnly</code> besser geeignet. Nach dem Wort Disabled kann auch eine 0 oder 1 für den Anfangsstatus erfolgen (0 für aktiviert, 1 für deaktiviert). Das heißt, dass <code>Disabled</code> und <code>Disabled%VarMitEins%</code> identisch sind.</p>
<p><strong>Hidden</strong>: Das Steuerelement wird zu Beginn unsichtbar gemacht. Verwende <a href="GuiControl.htm#Show">GuiControl Show</a>, um es später wieder sichtbar zu machen. Nach dem Wort Hidden kann auch eine 0 oder 1 für den Anfangsstatus erfolgen (0 für sichtbar, 1 für versteckt). Das heißt, dass <code>Hidden</code> und <code>Hidden%VarMitEins%</code> identisch sind.</p>
<p><strong>Left</strong>: Richtet den Text im Steuerelement nach links aus.</p>
<p><strong>Right</strong>: Richtet den Text im Steuerelement nach rechts aus. Bei CheckBox- und Radio-Steuerelementen wird das Auswahlfeld auf die rechte Seite gesetzt.</p>
<p><strong>Center</strong>: Zentriert den Text im Steuerelement auf horizontaler Ebene aus. </p>
<p><strong><a name="Section"></a>Section</strong>: Beginnt eine neue Sektion und speichert die Position von diesem Steuerelement ab, das danach mit den Positionierungsoptionen <em>xs</em> und <em>ys</em> weiterverwendet werden kann (<a href="#xs">siehe oben</a>).</p>
<p><strong><a name="Tabstop" id="Tabstop"></a>Tabstop</strong>: Verwende <code>-Tabstop</code> bei einem eingabefähigen Steuerelement, das beim Drücken der TAB-Taste übersprungen werden soll.</p>
<p><strong><a name="Wrap"></a>Wrap</strong>: Aktiviert den automatischen Zeilenumbruch im Steuerelement. Da nahezu alle Steuerelemente den automatischen Zeilenumbruch aktiv haben, sollte man <code>-Wrap</code> verwenden, um den automatischen Zeilenumbruch zu deaktivieren.</p>
<p><strong>VScroll</strong>: Stellt eine vertikale Scrollleiste zur Verfügung, wenn das bei dem Steuerelement möglich ist.</p>
<p><strong>HScroll</strong>: Stellt eine horizontale Scrollleiste zur Verfügung, wenn das bei dem Steuerelement möglich ist. Der Rest von diesem Absatz gilt nur für die <a href="GuiControls.htm#ListBox">ListBox</a>. Die Breite des scrollbaren Bereichs ist standardmäßig 3-mal so groß wie die Breite der ListBox. Wenn die Breite des scrollbaren Bereichs selbst definiert werden soll, füge nach dem Wort HScroll eine Zahl ein. Zum Beispiel würde <code>HScroll500</code> einen scrollbaren Bereich von 500 Pixeln innerhalb der ListBox ermöglichen. Ist die angegebene Breite des Bereichs allerdings kleiner als die Breite der ListBox, wird die Scrollleiste nicht angezeigt (nur mit <em>HScroll</em> ist es später möglich, die horizontale Scrollleiste per <code><a href="GuiControl.htm">GuiControl</a>, +HScroll500, EigeneScrollleiste</code> einzufügen).</p>

<h2>Steuerelemente: Ungewöhnliche Styles und Optionen</h2>
<p><strong><a name="BackgroundTrans"></a>BackgroundTrans</strong>: Verwendet einen transparenten Hintergrund, wodurch Steuerelemente, die sich hinter einem Text-, Picture- oder GroupBox-Steuerelement befinden, durchscheinen können. Zum Beispiel würde ein transparentes Text-Steuerelement, das sich auf ein Picture-Steuerelement befindet, seinen Text erscheinen lassen, als würde er zum Bild gehören. Mit <code><a href="GuiControl.htm">GuiControl</a>, +Background</code> kann diese Option wieder entfernt werden. Im <a href="GuiControls.htm#PicAltSubmit">AltSubmit-Abschnitt des Picture-Steuerelements</a> findet man weitere Informationen über transparente Bilder. Bekannte Einschränkung: BackgroundTrans kann sich bei Steuerelementen innerhalb eines <a href="GuiControls.htm#Tab">Tab-Steuerelements</a> falsch verhalten, das eine <a href="ListView.htm">ListView</a> enthält.</p>
<p><strong>-Background</strong>: Verwendet die Standard-Hintergrundfarbe, anstatt die Farbe, welche von <a href="#Color">Gui Color</a> gesetzt wurde. Das wird häufig eingesetzt, um ein Tab-Steuerelement dazu zu bringen, seine Standardfarbe anstelle der Fensterfarbe zu verwenden. Mit <code><a href="GuiControl.htm">GuiControl</a>, +Background</code> kann diese Option wieder entfernt werden.</p>
<p><strong>Border</strong>: Umrahmt das Steuerelement mit einer dünnen Linie. Die meisten Steuerelemente benötigen diese Option nicht, da sie bereits einen typenspezifischen Rahmen haben. Beim Hinzufügen eines Rahmens an ein <em>vorhandenes</em> Steuerelement kann es notwendig sein, die Breite und Höhe des Steuerelements um einen Pixel zu erweitern.</p>
<p><strong><a name="HwndOutputVar"></a>Hwnd</strong><em>OutputVar</em> When used with <a href="#Add">Gui Add</a>, this option stores the window handle (HWND) of the newly created control in <em>OutputVar</em>. Zum Beispiel: <code>Gui, Add, Edit, vMyEdit HwndMyEditHwnd</code>. When within a function, <em>MyEditHwnd</em> is treated as a <a href="../Functions.htm#DynVar">function dynamic variable</a>. A control's HWND is often used with <a href="PostMessage.htm">PostMessage</a>, <a href="PostMessage.htm">SendMessage</a>, and <a href="DllCall.htm">DllCall</a>. It can also be used directly as an <a href="../misc/WinTitle.htm#ahk_id">ahk_id WinTitle</a> (this also works on hidden controls even when <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> is Off) or with GuiControl and GuiControlGet as the <em>ControlID</em> parameter. On a related note, a parent window's HWND can be retrieved via <code><a href="#GuiHwndOutputVar">Gui MyGui:+HwndOutputVar</a></code>.</p>
<p><strong>Theme</strong>: Diese Option kann dazu verwendet werden, das aktuelle Fenster-Design des neu erstellten Steuerelements zu überschreiben. Bei bereits vorhandenen Steuerelementen hat diese Option keinen Effekt; allerdings wird das möglicherweise in einer zukünftigen Version geändert. Siehe <a href="#Theme">Gui +/-Theme</a> für Details.</p>
<p><strong>(Unbenannter Style)</strong>: Verwende ein Plus- oder Minuszeichen, gefolgt von einer dezimalen oder hexadezimalen <a href="../misc/Styles.htm">Style-Nummer</a>. Vorzeichenlose Styles werden standardmäßig hinzugefügt.</p>
<p><strong>(Unbenannter ExStyle)</strong>: Verwende ein Plus- oder Minuszeichen, gefolgt von dem Buchstaben "E" und einer dezimalen oder hexadezimalen erweiterten Style-Nummer. Vorzeichenlose Styles werden standardmäßig hinzugefügt. Zum Beispiel würde <code>E0x200</code> den WS_EX_CLIENTEDGE-Style hinzufügen, der einen Rahmen mit abgesenktem Rand bereitstellt, welcher gut geeignet für Picture-Steuerelemente und ähnliches ist. Weitere nicht-dokumentierte Styles findet man auf <a href="http://www.microsoft.com">www.microsoft.com</a>, z. B. mit der Suche nach WS_EX_CLIENTEDGE.</p>

<h2 id="Remarks"><strong><a name="Labels"></a></strong>Fensterereignisse</h2>
<p>Die folgenden Label (Subroutinen) werden automatisch mit einem GUI-Fenster verbunden, falls diese im Script vorhanden sind:</p>
<p><strong><a name="GuiClose"></a>GuiClose</strong>: Startet, wenn das Fenster mit einer der folgenden Methoden geschlossen wird: Drücken des X-Buttons in der Titelleiste, Auswählen von "Schließen" im Systemmenü oder per <a href="WinClose.htm">WinClose</a>. Fehlt dieses Label, bewirkt das Schließen des Fensters, dass es einfach versteckt wird, was den gleichen Effekt hat wie <a href="#Cancel">Gui Cancel</a>. Einer der häufigsten Maßnahmen für GuiClose ist <a href="ExitApp.htm">ExitApp</a>. Zum Beispiel:</p>
<pre>GuiClose:
ExitApp</pre>
<p><strong><a name="GuiEscape"></a>GuiEscape</strong>: Startet, wenn der Benutzer die ESC-Taste drückt, während das GUI-Fenster aktiv ist. Fehlt dieses Label, wird das Drücken der ESC-Taste nichts bewirken. Bekannte Einschränkung: Sollte das erste Steuerelement im Fenster deaktiviert sein (wahrscheinlich abhängig vom Typ des Steuerelements), wird das GuiEscape-Label nicht ausgeführt. Dieser Effekt könnte auch durch andere Umstände ausgelöst werden.</p>
<p><strong><a name="GuiSize"></a>GuiSize</strong>: Startet, wenn das Fenster skaliert, minimiert, maximiert oder wiederhergestellt wird. Die internen Variablen <a href="../Variables.htm#GuiWidth">A_GuiWidth</a> und <a href="../Variables.htm#GuiWidth">A_GuiHeight</a> enthalten jeweils die neue Breite und Höhe des Client-Fensterbereichs (das ist der Bereich ohne Rahmen, Titelleiste und Menüleiste). In addition, <a href="../Variables.htm#EventInfo">A_EventInfo</a> will contain one of the following digits:</p>
<p>0: Das Fenster wurde wiederhergestellt oder dessen Größe auf normale Weise geändert, wie durch Ziehen des Rahmens.<br>
  1: Das Fenster wurde minimiert.<br>
  2: Das Fenster wurde maximiert.</p>
<p>Ein Script kann GuiSize dazu verwenden, die Position und Größe der Steuerelemente neu anzupassen, während der Benutzer die Größe des Fensters ändert. Dieser Ablauf kann z. B. mit dem <a href="http://www.autohotkey.net/%7ETitan/anchor.html">"Anchor"-Script von Titan</a> via <a href="_Include.htm">#Include</a> vereinfacht werden.</p>
<p><strong><a name="GuiContextMenu"></a>GuiContextMenu</strong>: Startet immer dann, wenn der Benutzer ein Rechtsklick im Fenster macht (außer Titelleiste und Menüleiste). Es wird auch gestartet, wenn die MENÜ-Taste oder UMSCHALT+F10 gedrückt wird. Im Gegensatz zu den meisten anderen GUI-Labels können mehrere <a href="../misc/Threads.htm">Threads</a> von diesem Label vorhanden sein. Innerhalb des GuiContextMenu-Labels sind folgende interne Variablen verfügbar:</p>
<ol>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a>, die den <a href="../Variables.htm#GuiControl">Text oder Variablennamen</a> des Steuerelements enthält, das das Ereignis empfangen hat (leer, wenn nichts).</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a>: Falls ListBox, ListView oder TreeView das Ziel des Kontextmenüs ist (kann mit A_GuiControl ermittelt werden), gibt A_EventInfo an, welches der Elemente des Steuerelements das Ziel ist:<br>
    <a href="GuiControls.htm#ListBox">ListBox</a> oder <a href="ListView.htm">ListView</a>: A_EventInfo enthält die Nummer der aktuell fokussierten Zeile (0, wenn keine).<br>
    <a href="TreeView.htm">TreeView</a>: Bei Rechtsklick enthält A_EventInfo die ID-Nummer des angeklickten Elements (0, wenn der Benutzer kein Element angeklickt hat). Beim Drücken der MENÜ-Taste oder UMSCHALT+F10 enthält A_EventInfo die ID-Nummer des ausgewählten Elements.</li>
  <li>A_GuiX und A_GuiY, die die Koordinaten X und Y enthalten, auf denen das Menü angezeigt werden soll (z. B. <code><a href="Menu.htm">Menu</a>, EigenerKontext, Show, %A_GuiX%, %A_GuiY%</code>). Die Koordinaten beziehen sich auf die linke obere Ecke des Fensters. </li>
  <li>A_GuiEvent, die das Wort "RightClick" enthält, wenn der Benutzer ein Rechtsklick macht, oder "Normal", wenn das Menü durch die MENÜ-Taste oder UMSCHALT+F10 ausgelöst worden ist.</li>
</ol>
<p>Hinweis: Da die Steuerelemente <a href="GuiControls.htm#Edit">Edit</a> und <a href="GuiControls.htm#MonthCal">MonthCal</a> ihre eigenen Kontextmenüs haben, wird ein Rechtsklick auf solche Steuerelemente GuiContextMenu nicht starten.</p>
<p><strong><a name="GuiDropFiles"></a>GuiDropFiles</strong>: Startet immer dann, wenn Dateien oder Ordner per Drag&amp;Drop auf das Fenster abgelegt worden sind (wenn das Label bereits läuft, werden Drop-Ereignisse ignoriert). Innerhalb des GuiDropFiles-Labels sind folgende interne Variablen verfügbar:</p>
<ol>
  <li><a href="../Variables.htm#GuiControl">A_GuiControl</a>, die den <a href="../Variables.htm#GuiControl">Text oder Variablennamen</a> des Steuerelements enthält, auf dem die Dateien abgelegt worden sind (leer, wenn keine).</li>
  <li><a href="../Variables.htm#EventInfo">A_EventInfo</a>, which contains the number of files dropped.</li>
  <li>A_GuiX und A_GuiY, die die Koordinaten X und Y enthalten, auf denen die Dateien abgelegt worden sind (bezogen auf die obere linke Ecke des Fensters). </li>
  <li>A_GuiEvent, die die Namen der abgelegten Dateien enthält. Jeder Dateiname, außer der letzte, endet mit einem Zeilenumbruchszeichen (`n).</li>
</ol>
<p>Sollen einzelne Dateien extrahiert werden, verwende eine <a href="LoopParse.htm">Parsing-Schleife</a> wie folgt:
</p>
<pre><em>; EXAMPLE #1:</em>
Loop, parse, A_GuiEvent, `n
{
    MsgBox, 4,, File number %A_Index% is:`n%A_LoopField%.`n`nContinue?
    if A_MsgBoxResult = "No", break
}

<em>; EXAMPLE #2: Nur die erste Datei extrahieren:</em>
Loop, parse, A_GuiEvent, `n
{
    FirstFile = %A_LoopField%
    Break
}

<em>; BEISPIEL #3: Dateien alphabetisch sortieren:</em>
FileList = %A_GuiEvent%
Sort, FileList
Loop, parse, FileList, `n
    MsgBox Dateinummer %A_Index% ist:`n%A_LoopField%.</pre>
<p>Soll Drag&amp;Drop nur vorübergehend bei einem Fenster deaktiviert werden, entferne den WS_EX_ACCEPTFILES-Style per <code>Gui -E0x10</code>. Mit <code>Gui +E0x10</code> kann das wieder aktiviert werden.</p>
<p><strong>Erkennen von und reagieren auf andere Ereignisse</strong>: Andere Arten von GUI-Ereignissen können per <a href="OnMessage.htm">OnMessage()</a> erkannt und verarbeitet werden. Zum Beispiel kann ein Script dazu gebracht werden, immer dann kontextabhängige Hilfe per ToolTip anzuzeigen, wenn der Benutzer den Mauszeiger über bestimmte Steuerelemente im Fenster bewegt. Siehe dazu das <a href="#ExToolTip">Beispiel mit GUI-ToolTip</a>.</p>
<h2><a name="MultiWin" id="MultiWin"></a>Mehrere GUI-Fenster erstellen</h2>
<p>Abgesehen vom ersten Fenster müssen bei anderen Fenstern deren Namen oder Nummern (falls vorhanden) angegeben werden, damit sie die oben genannten Labels verwenden können. Zum Beispiel würden 2GuiEscape und 2GuiClose die Standard-Label des zweiten Fensters sein, während <em>EigenesGui</em>GuiEscape und <em>EigenesGui</em>GuiClose die Standard-Label für <em>EigenesGui</em> sind. Um benutzerdefinierte Labelnamen zu verwenden, siehe <code><a href="#PlusLabel">Gui +Label</a></code>.</p>
<p>To operate upon a window other than the <a href="#DefaultWin">default</a>, include its name, number or <a href="#GuiHwndOutputVar">HWND</a> followed by a colon in front of the sub-command, as in these examples:</p>
<pre>Gui, <strong>EigenesGui:</strong>Add, Text,, Text für das Über-Fenster.
Gui, <strong>EigenesGui:</strong>Show</pre>
<p>Mit <code><a href="#Default">Gui EigenesGui:Default</a></code> kann verhindert werden, dass das oben genannte Präfix "EigenesGui:" angegeben werden muss. Innerhalb eines <a href="#DefaultWin">GUI-Threads</a>, der das gleiche Fenster verarbeitet, welches den Thread ausgeführt hat, ist das Präfix außerdem nicht notwendig.</p>
<p id="Name">Gui names must conform to the same rules as <a href="../Variables.htm#Variable_names">variable names</a>. Jede Nummer größer als 99 oder länger als zwei Zeichen (wie z. B. 0x01) muss das HWND eines vorhandenen Gui-Fensters sein, denn ansonsten würde dieser Befehl fehlschlagen. Je nach verfügbaren Systemressourcen können beliebig viele Fenster erstellt werden.</p>
<p>Any number of unnamed GUI windows can be created using <a href="#New">Gui, New</a>.</p>
<h2 id="DefaultWin">GUI Events</strong>, Threads, and Subroutines</h2>
<p>Ein GUI-<a href="../misc/Threads.htm">Thread</a> wird wie jeder andere Thread definiert, der aufgrund einer GUI-Aktion gestartet wurde. Zu den GUI-Aktionen gehört beispielsweise das Auswählen eines <a href="#Menu">Menüpunkts</a> oder das Ausführen eines <a href="#label">g-Labels</a> (z. B. beim Drücken einer Schaltfläche).</p>
<p>Bei einem GUI-Thread ist der <strong><a href="#MultiWin">Standardfenstername</a></strong> der Name des Fensters, das diesen Thread gestartet hat. Nicht-GUI-Threads verwenden standardmäßig eine 1.</p>
<p>Jedes Mal, wenn ein GUI-<a href="../misc/Threads.htm">Thread</a> startet, wird das <a href="../misc/WinTitle.htm#LastFoundWindow">zuletzt gefundene Fenster</a> von diesem Thread zu Beginn das GUI-Fenster selbst sein. This allows commands for windows and controls -- such as <a href="WinMove.htm">WinMove, </a><a href="WinHide.htm">WinHide</a>, <a href="WinSet.htm">WinSet</a>, <a href="WinSetTitle.htm">WinSetTitle</a>, and <a href="ControlGetFocus.htm">ControlGetFocus</a> -- to omit WinTitle and WinText when operating upon the GUI window itself (even if it is hidden).</p>
<p>Das Klicken auf ein Steuerelement wird nicht funktionieren, wenn das <a href="#label">g-Label</a> aufgrund eines vorherigen Klicks noch läuft. Das kann man verhindern, wenn man in der ersten Zeile einer Subroutine <a href="Critical.htm">Critical</a> verwendet (allerdings werden dadurch auch andere <a href="../misc/Threads.htm">Threads</a> zwischengespeichert / aufgeschoben, wie das Drücken eines Hotkeys).</p>
<p>Die internen Variablen A_Gui und A_GuiControl enthalten den Fensternamen und die ID des Steuerelements, das den aktuellen Thread gestartet hat. Siehe <a href="../Variables.htm#Gui">A_Gui</a> und <a href="../Variables.htm#GuiControl">A_GuiControl</a> für mehr Details.</p>
<p>Wenn man mehrere Ereignisse dazu bringen will, die gleiche Subroutine durchzuführen, sollte man deren Label einfach übereinander setzen. Zum Beispiel:</p>
<pre>GuiEscape:
GuiClose:
ButtonCancel:
ExitApp  <em>; Alle oberen Labels werden diesen Befehl ausführen.</em></pre>
<p>Alle neuen GUI-<a href="../misc/Threads.htm">Threads</a> beginnen mit Standardwerten bei Einstellungen wie <a href="SendMode.htm">SendMode</a>. Diese können im <a href="../Scripts.htm#auto">automatischen Ausführungsbereich</a> geändert werden.</p>
<h2 id="Navigate">Navigation mit der Tastatur</h2>
<p>Es ist möglich, ein GUI-Fenster mit der TAB-Taste zu steuern. Dabei wird der Tastaturfokus auf das nächste eingabefähige Steuerelement geschoben (Steuerelemente mit deaktiviertem <a href="#Tabstop">Tabstop</a>-Style werden übersprungen). Die Reihenfolge der hinzugefügten Steuerelemente bestimmt die Reihenfolge der Navigation. Anfangs befindet sich der Tastaturfokus auf das erste eingabefähige Steuerelement, das den Tabstop-Style aktiv hat (was die meisten Steuerelemente standardmäßig haben).</p>
<p><a name="ShortcutKey"></a>Bei einigen Steuerelementen kann ein Und-Zeichen (&amp;) angegeben werden, um eine Tastenkombination zu erzeugen, die im Text des Steuerelements als unterstrichenes Zeichen dargestellt wird (abhängig von den Systemeinstellungen). Der Benutzer kann diese Tastenkombination aktivieren, wenn er die ALT-Taste gedrückt hält und das entsprechende Zeichen auf der Tastatur drückt. Bei Button-, CheckBox- und Radio-Steuerelementen entspricht das Drücken der Tastenkombination dem Anklicken des Steuerelements. Bei GroupBox- und Text-Steuerelementen bewirkt das Drücken der Tastenkombination, dass der Tastaturfokus auf das erste eingabefähige <a href="#Tabstop">Tabstop</a>-Steuerelement springt, welches danach erstellt worden ist. Haben mehrere Steuerelemente allerdings die gleiche Tastenkombination, springt der Tastaturfokus zwischen diesen Steuerelementen abwechselnd hin und her. </p>
<p>Um ein Und-Zeichen innerhalb der oben genannten Steuerelementarten direkt darstellen zu können, müssen zwei aufeinanderfolgende Und-Zeichen wie folgt angegeben werden: <code>Save &amp;&amp; Exit</code>.</p>
<h2 id="Appear">Fensterdarstellung</h2>
<p>Ein GUI-Fenster verwendet als Icon das Tray-Icon, das beim Erstellen des Scripts verwendet worden ist. Wenn ein anderes Icon angezeigt werden soll, muss das Tray-Icon daher erst geändert werden, noch bevor das Fenster erstellt wird. Zum Beispiel: <code><a href="Menu.htm">Menu</a>, Tray, Icon, EigenesIcon.ico</code>. Zudem ist es möglich, das große und kleine Icon unterschiedlich aussehen zu lassen (das große Icon wird in der Programmumschaltung via ALT+TAB angezeigt). Verwende dazu DllCall und SendMessage; zum Beispiel:</p>
<pre>hIcon32 := <a href="DllCall.htm">DllCall</a>("LoadImage", uint, 0
    , str, "Eigenes Icon.ico"  <em>; Dateiname des Icons (diese Datei kann mehrere Icons enthalten).</em>
    , uint, 1  <em>; Bildtyp: IMAGE_ICON</em>
    , int, 32, int, 32  <em>; gewünschte Breite und Höhe des Bilds (hilft LoadImage zu entscheiden, welches Icon am besten geeignet ist).</em>
    , uint, 0x10)  <em>; Flags: LR_LOADFROMFILE</em>
Gui +LastFound
<a href="PostMessage.htm">SendMessage</a>, 0x80, 1, hIcon32  <em>; 0x80 ist WM_SETICON; und 1 bedeutet ICON_BIG (0 für ICON_SMALL).</em>
Gui Show</pre>
<p>Aufgrund von Einschränkungen in Windows XP und höher übernehmen CheckBox-, Radio- und GroupBox-Steuerelemente mit einer benutzerdefinierten Textfarbe die klassische Design-Darstellung.</p>
<p>Verwandtes Thema: <a href="#Margin">Abstand im Fenster</a>.</p>
<h2 id="GenRemarks">Allgemeine Bemerkungen</h2>
<p>Mit <a href="GuiControl.htm">GuiControl</a> und <a href="GuiControlGet.htm">GuiControlGet</a> können bestimmte Steuerelemente in einem GUI-Fenster bearbeitet werden.</p>
<p>Jedes GUI-Fenster kann ca. 11000 Steuerelemente enthalten. Allerdings kann das System schon bei 5000 Steuerelementen instabil werden.</p>
<p>If the script is not <a href="../Scripts.htm#persistent">persistent</a> for any other reason, it will exit after the last visible GUI is closed; either when the last thread completes or immediately if no threads are running.</p>

<h2>Siehe auch</h2>
<p><a href="GuiControl.htm">GuiControl</a>, <a href="GuiControlGet.htm">GuiControlGet</a>, <a href="Menu.htm">Menu</a>, <a href="GuiControls.htm">Control Types</a>, <a href="ListView.htm">ListView</a>, <a href="TreeView.htm">TreeView</a>, <a href="Control.htm">Control</a>, <a href="ControlGet.htm">ControlGet</a>, <a href="MsgBox.htm">MsgBox</a>, <a href="FileSelect.htm">FileSelect</a>, <a href="DirSelect.htm">DirSelect</a></p>
<h2 id="Examples">Beispiele</h2>
<pre class="NoIndent"><em>; Beispiel: Display a text pop-up:</em>

Gui, +AlwaysOnTop +Disabled -SysMenu +Owner  <em>; +Owner avoids a taskbar button.</em>
Gui, Add, Text,, Some text to display.
Gui, Show, NoActivate, Title of Window  <em>; NoActivate avoids deactivating the currently active window.</em></pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Ein einfaches Eingabefenster zur Abfrage des Vor- und Nachnamens:</em>

Gui, Add, Text,, Vorname:
Gui, Add, Text,, Nachname:
Gui, Add, Edit, vVorname ym  <em>; Die ym-Option beginnt eine neue Spalte für Steuerelemente.</em>
Gui, Add, Edit, vNachname
Gui, Add, Button, default, OK  <em>; ButtonOK-Label (wenn vorhanden) wird ausgeführt, wenn die Schaltfläche gedrückt wird.</em>
Gui, Show,, Einfaches Eingabebeispiel
Return  <em>; Ende des automatischen Ausführungsbereichs. Das Script ist solange im Leerlauf, bis der Benutzer irgendetwas macht.</em>

GuiClose:
ButtonOK:
Gui, Submit  <em>; Speichert die Benutzereingaben in die jeweils zugewiesene Variable.</em>
MsgBox Sie haben "%Vorname% %Nachname%" eingegeben.
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Tab control:</em>

Gui, Add, Tab2,, First Tab|Second Tab|Third Tab
Gui, Add, Checkbox, vMyCheckbox, Sample checkbox
Gui, Tab, 2
Gui, Add, Radio, vMyRadio, Sample radio1
Gui, Add, Radio,, Sample radio2
Gui, Tab, 3
Gui, Add, Edit, vMyEdit r5  <em>; r5 means 5 rows tall.</em>
Gui, Tab  <em>; i.e. subsequently-added controls will not belong to the tab control.</em>
Gui, Add, Button, default xm, OK  <em>; xm puts it at the bottom left corner.</em>
Gui, Show
return

ButtonOK:
GuiClose:
GuiEscape:
Gui, Submit  <em>; Save each control's contents to its associated variable.</em>
MsgBox You entered:`n%MyCheckbox%`n%MyRadio%`n%MyEdit%
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: ListBox containing files in a directory:</em>

Gui, Add, Text,, Pick a file to launch from the list below.`nTo cancel, press ESCAPE or close this window.
Gui, Add, ListBox, vMyListBox gMyListBox w640 r10
Gui, Add, Button, Default, OK
Loop, C:\*.*  <em>; Change this folder and wildcard pattern to suit your preferences.</em>
{
    GuiControl,, MyListBox, %A_LoopFilePath%
}
Gui, Show
return

MyListBox:
if A_GuiEvent &lt;&gt; DoubleClick
    return
<em>; Otherwise, the user double-clicked a list item, so treat that the same as pressing OK.
; So fall through to the next label.</em>
ButtonOK:
GuiControlGet, MyListBox  <em>; Retrieve the ListBox's current selection.</em>
MsgBox, 4,, Would you you like to launch the file or document below?`n`n%MyListBox%
if A_MsgBoxResult = "No"
    return
<em>; Otherwise, try to launch it:</em>
Run, %MyListBox%,, UseErrorLevel
if ErrorLevel = ERROR
    MsgBox Could not launch the specified file.  Vielleicht ist die Datei mit keinem Programm verknüpft.
Return

GuiClose:
GuiEscape:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><a name="ExToolTip"></a><em>; Beispiel: Eine kontextabhängige Hilfe (mittels ToolTip) anzeigen, sobald der Benutzer die Maus über ein bestimmtes Steuerelement hält:</em>

Gui, Add, Edit, v<strong>EigenesEdit</strong>
<strong>EigenesEdit</strong>_TT := "Das ist ein Tooltip für das Steuerelement mit dem Variablennamen EigenesEdit."
Gui, Add, DropDownList, v<strong>EigeneDDL</strong>, Rot|Grün|Blau
<strong>EigeneDDL</strong>_TT := "Wählen Sie eine Farbe aus der Liste."
Gui, Add, Checkbox, vEigeneCheckBox, Dieses Steuerelement hat keinen ToolTip.
Gui, Show
<a href="OnMessage.htm">OnMessage</a>(0x200, "WM_MOUSEMOVE")
Return

WM_MOUSEMOVE()
{
    static CurrControl, PrevControl, _TT  <em>; _TT bleibt für den unteren ToolTip-Befehl leer.</em>
    CurrControl := A_GuiControl
    If (CurrControl &lt;&gt; PrevControl and not InStr(CurrControl, " "))
    {
        ToolTip  <em>; Schließt alle offenen ToolTips.</em>
        SetTimer, DisplayToolTip, 1000
        PrevControl := CurrControl
    }
    Return

    DisplayToolTip:
    SetTimer, DisplayToolTip, Off
    <a href="ToolTip.htm">ToolTip</a> % %CurrControl%_TT  <em>; Das Prozentzeichen ermöglicht einen Ausdruck.</em>
    SetTimer, RemoveToolTip, 3000
    Return

    RemoveToolTip:
    SetTimer, RemoveToolTip, Off
    ToolTip
    Return
}


GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><a name="OSD"></a><em>; Beispiel: Bildschirmanzeige (OSD) mittels transparentem Fenster:</em>

IndividualFarbe = EEAA99  <em>; Kann eine beliebige RGB-Farbe sein (wird weiter unten transparent gemacht).</em>
Gui +LastFound +AlwaysOnTop -Caption +ToolWindow  <em>; +ToolWindow verhindert eine Schaltfläche in der Taskleiste und einen Eintrag in der Programmumschaltung via Alt+Tab.</em>
Gui, Color, %IndividualFarbe%
Gui, Font, s32  <em>; Ermöglicht eine große Schriftgröße (32 Punkte).</em>
Gui, Add, Text, vEigenerText cLime, XXXXX YYYYY  <em>; XX &amp; YY passt die Größe des Fensters automatisch an.
; Macht alle Pixel dieser Farbe transparent und den Text selbst durchsichtig (150):</em>
WinSet, TransColor, %IndividualFarbe% 150
SetTimer, OSDAktualisieren, 200
Gosub, OSDAktualisieren  <em>; Aktualisierung sofort durchzuführen, anstatt auf den Timer zu warten.</em>
Gui, Show, x0 y400 NoActivate  <em>; NoActivate verhindert das Deaktivieren des aktiven Fensters.</em>
Return

OSDAktualisieren:
MouseGetPos, MausX, MausY
GuiControl,, EigenerText, X%MausX%, Y%MausY%
Return</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Eine animierte Fortschrittsleiste auf einem Hintergrundbild.</em>

Gui, Color, White
Gui, Add, Picture, x0 y0 h350 w450, %A_WinDir%\system32\ntimage.gif
Gui, Add, Button, Default xp+20 yp+250, Animation starten
Gui, Add, Progress, vEigenesProgress w416
Gui, Add, Text, vEigenerText wp  <em>; wp bedeutet "vorherige Breite verwenden".</em>
Gui, Show
Return

ButtonStartTheBarMoving:
Loop, %A_WinDir%\*.*
{
    If A_Index &gt; 100
        break
    GuiControl,, EigenesProgress, %A_Index%
    GuiControl,, EigenerText, %A_LoopFileName%
    Sleep 50
}
GuiControl,, EigenerText, Animation beendet.
Return

GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Simple image viewer:</em>

Gui, +Resize
Gui, Add, Button, default, &amp;Load New Image
Gui, Add, Radio, ym+5 x+10 vRadio checked, Load &amp;actual size
Gui, Add, Radio, ym+5 x+10, Load to &amp;fit screen
Gui, Add, Pic, xm vPic
Gui, Show
return

ButtonLoadNewImage:
FileSelect, file,,, Select an image:, Images (*.gif; *.jpg; *.bmp; *.png; *.tif; *.ico; *.cur; *.ani; *.exe; *.dll)
if file =
    return
Gui, Submit, NoHide <em>; Save the values of the radio buttons.</em>
if Radio = 1  <em>; Display image at its actual size.</em>
{
    Width = 0
    Height = 0
}
else <em>; Second radio is selected: Größe des Bildes anpassen, damit es auf dem Bildschirm passt.</em>
{
    Width := A_ScreenWidth - 28  <em>; Minus 28, um einen Raum für Rahmen und Abstände zu gewährleisten.</em>
    Height = -1  <em>; "Seitenverhältnis beibehalten" ist scheinbar die beste Lösung.</em>
}
GuiControl,, Pic, *w%width% *h%height% %file%  <em>; Bild laden.</em>
Gui, Show, xCenter y0 AutoSize, %file%  <em>; Die Fenstergröße auf die Bildgröße anpassen.</em>
Return

GuiClose:
ExitApp</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel: Simple text editor with menu bar.</em>

<em>; Create the sub-menus for the menu bar:</em>
Menu, FileMenu, Add, &amp;New, FileNew
Menu, FileMenu, Add, &amp;Open, FileOpen
Menu, FileMenu, Add, &amp;Save, FileSave
Menu, FileMenu, Add, Save &amp;As, FileSaveAs
Menu, FileMenu, Add  <em>; Separator line.</em>
Menu, FileMenu, Add, E&amp;xit, FileExit
Menu, HelpMenu, Add, &amp;About, HelpAbout

<em>; Create the menu bar by attaching the sub-menus to it:</em>
Menu, MyMenuBar, Add, &amp;File, :FileMenu
Menu, MyMenuBar, Add, &amp;Help, :HelpMenu

<em>; Attach the menu bar to the window:</em>
Gui, Menu, MyMenuBar

<em>; Create the main Edit control and display the window:</em>
Gui, +Resize  <em>; Make the window resizable.</em>
Gui, Add, Edit, vMainEdit WantTab W600 R20
Gui, Show,, Untitled
CurrentFileName =  <em>; Indicate that there is no current file.</em>
return

FileNew:
GuiControl,, MainEdit  <em>; Clear the Edit control.</em>
return

FileOpen:
Gui +OwnDialogs  <em>; Force the user to dismiss the FileSelect dialog before returning to the main window.</em>
FileSelect, SelectedFileName, 3,, Open File, Text Documents (*.txt)
if SelectedFileName =  <em>; No file selected.</em>
    return
Gosub FileRead
return

FileRead:  <em>; Caller has set the variable SelectedFileName for us.</em>
FileRead, MainEdit, %SelectedFileName%  <em>; Read the file's contents into the variable.</em>
if ErrorLevel
{
    MsgBox Could not open "%SelectedFileName%".
    return
}
GuiControl,, MainEdit, %MainEdit%  <em>; Put the text into the control.</em>
CurrentFileName = %SelectedFileName%
Gui, Show,, %CurrentFileName%   <em>; Show file name in title bar.</em>
return

FileSave:
if CurrentFileName =   <em>; No filename selected yet, so do Save-As instead.</em>
    Goto FileSaveAs
Gosub SaveCurrentFile
return

FileSaveAs:
Gui +OwnDialogs  <em>; Force the user to dismiss the FileSelect dialog before returning to the main window.</em>
FileSelect, SelectedFileName, S16,, Save File, Text Documents (*.txt)
if SelectedFileName =  <em>; No file selected.</em>
    return
CurrentFileName = %SelectedFileName%
Gosub SaveCurrentFile
return

SaveCurrentFile:  <em>; Es ist sichergestellt, dass AktuellerDateiname nicht leer ist.</em>
IfExist %AktuellerDateiname%
{
    FileDelete %AktuellerDateiname%
    If ErrorLevel
    {
        MsgBox Überschreiben der Datei "%AktuellerDateiname%" fehlgeschlagen.
        Return
    }
}
GuiControlGet, HauptEdit  <em>; Ermittelt den Inhalt des Eingabefeldes.</em>
FileAppend, %HauptEdit%, %AktuellerDateiname%  <em>; Speichert den Inhalt der Datei.
; Bei Erfolg den Dateinamen in der Titelleiste anzeigen (falls es mit DateiSpeichernAls aufgerufen wurde):</em>
Gui, Show,, %AktuellerDateiname%
Return

HilfeÜber:
Gui, Über:+owner1  <em>; Das Hauptfenster (Gui #1) wird dem Fenster "Über" übergeordnet.</em>
Gui +Disabled  <em>; Deaktiviert das Hauptfenster.</em>
Gui, Über:Add, Text,, Beliebiger Text.
Gui, Über:Add, Button, Default, OK
Gui, Über:Show
Return

ÜberButtonOK:  <em>; Dieser Bereich wird vom Fenster "Über" benutzt.</em>
ÜberGuiClose:
ÜberGuiEscape:
Gui, 1:-Disabled  <em>; Reaktiviert das Hauptfenster (muss vor dem nächsten Schritt getan werden).</em>
Gui Destroy  <em>; Das Fenster "Über" zerstören.</em>
Return

GuiDropFiles:  <em>; Unterstützt Ziehen &amp; Ablegen.</em>
Loop, Parse, A_GuiEvent, `n
{
    AusgewählterDateiname = %A_LoopField%  <em>; Nur die erste Datei nehmen (falls mehrere Dateien vorhanden sind).</em>
    break
}
Gosub DateiLesen
Return

GuiSize:
If ErrorLevel = 1  <em>; Das Fenster wurde minimiert.  Keine Aktion notwendig.</em>
    Return
<em>; Ansonsten wurde die Größe des Fensters geändert oder maximiert. Die Größe des Eingabefeldes anpassen.</em>
NeueBreite := A_GuiWidth - 20
NeueHöhe := A_GuiHeight - 20
GuiControl, Move, HauptEdit, W%NeueBreite% H%NeueHöhe%
Return

DateiBeenden:     <em>; Benutzer hat "Exit" im Dateimenü ausgewählt.</em>
GuiClose:  <em>; Benutzer hat das Fenster geschlossen.</em>
ExitApp</pre>
</body>
</html>
