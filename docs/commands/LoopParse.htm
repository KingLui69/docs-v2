<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>Loop (String parsen)</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>Loop (String parsen)</h1>

<p>Ermittelt nacheinander Teilstrings (Felder) aus einem String.</p>

<pre class="Syntax">Loop, Parse, String [, Delimiters, OmitChars] </pre>
<h3>Parameter</h3>
<dl>

  <dt>Parse</dt>
  <dd><p>This parameter must be the word PARSE, and cannot be an expression or variable reference.</p></dd>

  <dt>String</dt>
  <dd><p>The string to analyze.</p></dd>

  <dt>Trennzeichen</dt>
  <dd><p>Ist dieser Parameter leer oder nicht vorhanden, wird jedes Zeichen des Eingabestrings als einzelner Teilstring behandelt.</p>
      <p>If this parameter is <strong>CSV</strong>, the string will be parsed in standard comma separated value format. Hier ist ein Beispiel für eine CSV-Zeile, die von MS-Excel erzeugt wurde: "Erstes Feld",ZweitesFeld,"Das Wort ""Spezial"" mit direktes Anführungszeichen",,"Letztes Feld, mit direktem Komma"</p>
      <p>Otherwise, <em>Delimiters</em> contains one or more  characters (case sensitive), each of which is used to determine where the boundaries between substrings occur.</p>
      <p>Trennzeichen selbst werden nicht als Teil des Teilstrings angesehen. In addition, if there is nothing between a pair of delimiters within the input string, the corresponding substring will be empty.</p>
      <p>Zum Beispiel: `, (an escaped comma) would divide the string based on every occurrence of a comma. Similarly, %A_Tab%%A_Space% would start a new substring every time a space or tab is encountered in the input string.</p>
      <p>To use a string as a delimiter rather than a character, first use <a href="StrReplace.htm">StrReplace</a> to replace all occurrences of the string with a single character that is never used literally in the text, e.g. one of these special characters: ¢¤¥¦§©ª«®µ¶. Im folgenden Beispiel wird der String &lt;br&gt; als Trennung verwendet:</p>
      <pre>StrReplace, NewHTML, HTMLString, &lt;br&gt;, ¢, All
Loop, parse, NewHTML, ¢ <em>; Parse the string based on the cent symbol.</em>
{
...
}</pre></dd>

  <dt>ZeichenAuslassen</dt>
  <dd><p>Eine optionale Liste von Zeichen (abhängig von Groß- und Kleinschreibung), die am Anfang und Ende jeden Teilstrings ausgeschlossen werden. Wenn <em>ZeichenAuslassen</em> zum Beispiel %A_Space%%A_Tab% enthält, werden Leer- oder Tabulatorzeichen am Anfang und Ende (aber nicht in der Mitte) jeden Teilstrings entfernt.</p>
    <p>Wenn <em>Trennzeichen</em> leer ist, wird mit <em>ZeichenAuslassen</em> gekennzeichnet, welche Zeichen ausgelassen werden (die Schleife sieht sie nicht).</p>
    <p>Im Gegensatz zum letzten Parameter der meisten anderen Befehle müssen Kommas in <em>ZeichenAuslassen</em> mit einem Escapezeichen versehen werden (`,).</p></dd>

</dl>

<h3>Bemerkungen</h3>
<p>Eine string-parsende Schleife ist nützlich, um jedes Feld in einem String nacheinander abzuarbeiten. Parsing loops use less memory than <a href="StrSplit.htm">StrSplit</a> (though either way the memory use is temporary) and in most cases they are easier to use.</p>
<p><a name="LoopField"></a>Die interne Variable <strong>A_LoopField</strong> existiert in jeder Parsing-Schleife. It contains the contents of the current substring (field). Wenn eine innere Parsing-Schleife von einer äußeren Parsing-Schleife umschlossen ist, wird das Feld von der innersten Schleife Vorrang haben.</p>
<p>Obwohl eine interne Variable wie "A_LoopDelimiter" nicht existiert, wird im untersten Beispiel demonstriert, wie man erkennt, welche Trennung bei jedem Feld verwendet wurde.</p>
<p>There is no restriction on the size of the input string or its fields.</p>
<p>Vor dem Parsen können die Felder mit dem <a href="Sort.htm">Sort</a>-Befehl neu angeordnet werden. </p>
<p>Auf der <a href="Loop.htm">Loop</a>-Seite können Informationen zu <a href="Block.htm">Blöcke</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> und A_Index gefunden werden (weil diese in jeder Schleifenvariante vorkommen).</p>
<h3>Siehe auch</h3>
<p><a href="StrSplit.htm">StrSplit</a>, <a href="LoopReadFile.htm">file-reading loop</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a>, <a href="Sort.htm">Sort</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>
<h3>Beispiele</h3>
<pre class="NoIndent"><em>; Beispiel #1:</em>
Farben = rot,grün,blau
Loop, parse, Farben, `,
{
    MsgBox, Farbnummer %A_Index% ist %A_LoopField%.
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #2: Read the lines inside a variable, one by one (similar to a <a href="LoopReadFile.htm">file-reading</a> loop).
; A file can be loaded into a variable via <a href="FileRead.htm">FileRead</a>:</em>
Loop, parse, FileContents, `n, `r  <em>; Specifying `n prior to `r allows both Windows and Unix files to be parsed.</em>
{
    MsgBox, 4, , Line number %A_Index% is %A_LoopField%.`n`nContinue?
    if A_MsgBoxResult = "No", break
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #3: This is the same as the example above except that it's for the clipboard.
; It's useful whenever the clipboard contains files, such as those copied from an open
; Explorer window (the program automatically converts such files to their file names):</em>
Loop, parse, clipboard, `n, `r
{
    MsgBox, 4, , File number %A_Index% is %A_LoopField%.`n`nContinue?
    if A_MsgBoxResult = "No", break
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #4: Parse a comma separated value (CSV) file:</em>
Loop, read, C:\Database Export.csv
{
    LineNumber = %A_Index%
    Loop, parse, A_LoopReadLine, CSV
    {
        MsgBox, 4, , Field %LineNumber%-%A_Index% is:`n%A_LoopField%`n`nContinue?
        if A_MsgBoxResult = "No"
            return
    }
}</pre>
<p>&nbsp;</p>
<pre class="NoIndent"><em>; Beispiel #5: Erkennt, welche Trennung verwendet wurde.</em>

<em>; String initialisieren, der durchsucht wird.</em>
Farben = Rot,Grün|Blau;Gelb|Cyan,Magenta
<em>; Zähler initialisieren, um die aktuelle Position im String festzuhalten.</em>
Position := 0

Loop, Parse, Farben, `,|;
{
    <em>; Berechnet die Position der Trennung am Ende dieses Feldes.</em>
    Position += StrLen(A_LoopField) + 1
    <em>; Ermittelt die Trennung, die von der Parsing-Schleife gefunden wurde.</em>
    Trennung := SubStr(Farben, Position, 1)

    MsgBox Feld: %A_LoopField%`Trennung: %Trennung%
}</pre>

</body>
</html>
