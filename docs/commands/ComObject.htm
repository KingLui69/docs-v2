<!DOCTYPE HTML>
<html>
<head>
<title>ComObject()</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>ComObject()</h1>

<p>Wrappt ein Wert, SafeArray oder COM-Objekt, so dass es vom Script verwendet oder an eine COM-Methode übergeben werden kann.</p>
<pre class="Syntax">ComObject := ComObject(VarTyp, Wert [, Flags])</pre>

<p><strong>Erweitert:</strong> Wrappt oder entwrappt einen unbearbeiteten <a href="http://msdn.microsoft.com/en-us/library/dd318520.aspx">IDispatch</a>-Pointer, so dass es vom Script verwendet werden kann.</p>
<pre class="Syntax">ComObject := ComObject(DispPtr)</pre>

<h3>Parameter</h3>
<dl>

  <dt>VarTyp</dt>
  <dd><p>Ein Integer-Wert, der den Typ des Wertes kennzeichnet. Siehe <a href="ComObjType.htm#vt">ComObjType</a> für eine Liste von Typen.</p></dd>

  <dt>Wert</dt>
  <dd><p>Der Wert, der gewrappt werden soll. Zurzeit werden nur Integer- oder Pointer-Werte unterstützt.</p></dd>

  <dt>Flags</dt>
  <dd><p>Flags haben Einfluss auf das Verhalten des Wrapper-Objekts; siehe <a href="ComObjFlags.htm">ComObjFlags</a>, um mehr darüber zu erfahren.</p></dd>

  <dt>DispPtr</dt>
  <dd><p>Unbearbeiteter IDispatch-Pointer.</p></dd>

</dl>

<h3 id="Returns">Rückgabewert</h3>
<p>Gibt einen Wrapper-Objekt zurück, das einen <a href="ComObjType.htm">Variantentyp</a> und Wert, oder einen Pointer enthält.</p>
<p>Dieses Objekt hat zwei Nutzen:</p>
<ol>
  <li>Einige COM-Methoden erfordern möglicherweise bestimmte Wertetypen, die kein direktes Äquivalent innerhalb von AutoHotkey haben. Diese Funktion ermöglicht es, den Typ eines Wertes bei der Übergabe an eine COM-Methode anzugeben. Zum Beispiel erstellt <code>ComObject(0xB, -1)</code> ein Objekt, das den logischen COM-Wert <em>True</em> repräsentieren würde.</li>
  <li>Das Script kann unter Verwendung der <a href="../Objects.htm#Usage_Objects">Objektsyntax</a> mit einem gewrappten COM-Objekt oder SafeArray viel besser umgehen. Bei den meisten Scripts muss dies jedoch nicht manuell getan werden, weil ein Wrapper-Objekt automatisch durch <a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjArray.htm">ComObjArray</a> und anderen COM-Methoden, die ein Objekt zurückgeben, erstellt wird.</li>
</ol>

<h3 id="Remarks">Allgemeine Bemerkungen</h3>
<p>Wenn mit dieser Funktion ein <a href="http://msdn.microsoft.com/en-us/library/dd318520.aspx">IDispatch</a>- oder IUnknown-Interface-Pointer gewrappt wurde, übernimmt das Wrapper-Objekt die Verantwortung, den Pointer bei Bedarf automatisch freizugeben. Wenn <em>VarTyp</em> weggelassen wurde, wird das Objekt nach einem IDispatch-Interface <a href="ComObjQuery.htm">suchen</a>; ist eins auffindbar, wird <em>DispPtr</em> sofort freigegeben.  Sollte das Script beabsichtigen, den Pointer nach Aufrufen dieser Funktion zu verwenden, muss es zuerst <code><a href="ObjAddRef.htm">ObjAddRef</a>(DispPtr)</code> aufrufen.</p>
<p>Der <em>VarTyp</em> eines Wrapper-Objekts kann mit <a href="ComObjType.htm">ComObjType</a> abgerufen werden.</p>
<p>Der <em>Wert</em> eines Wrapper-Objekts kann mit <a href="ComObjValue.htm">ComObjValue</a> abgerufen werden.</p>
<p><b>Bekannte Einschränkung:</b> Jedes Mal, wenn ein COM-Objekt gewrappt wurde, wird ein neues Wrapper-Objekt erstellt. Vergleiche und Zuweisungen wie <code>obj1 == obj2</code> und <code>array[obj1] := Wert</code> behandeln die zwei Wrapper-Objekte einzigartig, selbst wenn sie das gleiche COM-Objekt enthalten.</p>

<h3 id="Related">Siehe auch</h3>
<p><a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjConnect.htm">ComObjConnect</a>, <a href="ComObjError.htm">ComObjError</a>, <a href="ComObjFlags.htm">ComObjFlags</a>, <a href="ObjAddRef.htm">ObjAddRef/ObjRelease</a>, <a href="ComObjQuery.htm">ComObjQuery</a>, <a href="http://msdn.microsoft.com/en-us/library/ms221467.aspx">GetActiveObject (MSDN)</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent" id="ByRefEx"><em>; Beispiel: Übergibt ein VARIANT per Verweis an eine COM-Funktion.</em>

code =
(
Sub Beispiel(Var)
    MsgBox Var
    Var = "Ausgabewert!"
End Sub
)
sc := <a href="ComObjCreate.htm">ComObjCreate</a>("ScriptControl"), sc.Language := "VBScript", sc.AddCode(code)

var := ComVar()
var[] := "Eingabewert"
sc.Run("Beispiel", var.ref)
MsgBox % var[]

<em>; ComVar: Erstellt ein Objekt, mit dem ein Wert per Verweis übergeben werden kann.
;   ComVar[] ermittelt den Wert.
;   ComVar[] := Wert bestimmt den Wert.
;   ComVar.ref empfängt ein ByRef-Objekt für die Übergabe an eine COM-Funktion.</em>
ComVar(Type:=0xC)
{
    static <a href="../Objects.htm#Custom_Objects">base</a> := { __Get: "ComVarGet", __Set: "ComVarSet", __Delete: "ComVarDel" }
    <em>; Erstellt ein Array von 1 VARIANT.  Diese Methode erlaubt es, dass sich integrierter Code
    ; um alle Konvertierungen zwischen VARIANT und ahk-interne Typen kümmern darf.</em>
    arr := <a href="ComObjArray.htm">ComObjArray</a>(Type, 1)
    <em>; Sperrt das Array und ermittelt einen Pointer, der auf das VARIANT verweist.</em>
    DllCall("oleaut32\SafeArrayAccessData", "ptr", <a href="ComObjValue.htm">ComObjValue</a>(arr), "ptr*", arr_data)
    <em>; Speichert das Array und ein Objekt, mit dem VARIANT per Verweis übergeben werden kann.</em>
    return { ref: ComObject(0x4000|Type, arr_data), _: arr, base: base }
}
ComVarGet(cv, <a href="../Functions.htm#Variadic">p*</a>) { <em>; Wird aufgerufen, wenn das Script auf ein unbekanntes Feld zugreift.</em>
    if p.MaxIndex() = "" <em>; Keine Namen/Parameter, also cv[]</em>
        return cv._[0]
}
ComVarSet(cv, v, p*) { <em>; Wird aufgerufen, wenn das Script ein unbekanntes Feld setzt.</em>
    if p.MaxIndex() = "" <em>; Keine Namen/Parameter, also cv[]:=v</em>
        return cv._[0] := v
}
ComVarDel(cv) { <em>; Wird aufgerufen, wenn das Objekt freigegeben wird.
    ; Das muss gemacht werden, damit das interne Array freigegeben werden kann.</em>
    DllCall("oleaut32\SafeArrayUnaccessData", "ptr", ComObjValue(cv._))
}

</pre>

</body>
</html>
