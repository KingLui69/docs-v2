<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<title>RegExMatch</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../css/default.css" rel="stylesheet" type="text/css">
</head>
<body>

<h1>RegExMatch()</h1>

<p>Überprüft, ob ein Muster (regulärer Ausdruck) im String vorkommt.</p>

<pre class="Syntax">FoundPos := RegExMatch(Haystack, NeedleRegEx [, OutputVar, StartingPosition = 1])</pre>
<h3>Parameter</h3>
<dl>

  <dt>Fundposition</dt>
  <dd><p>RegExMatch() gibt die Position von <em>NadelRegEx</em> zurück, das ganz links im <em>Heuhaufen</em>-String vorkommt. Position 1 ist das erste Zeichen. Eine 0 wird zurückgegeben, wenn der Ausdruck nicht gefunden wird. Falls ein Fehler auftritt (z. B. ein Syntaxfehler innerhalb von <em>NadelRegEx</em>), wird ein leerer String zurückgegeben und ErrorLevel auf einen der <a href="#ErrorLevel">unteren Werte</a> gesetzt, anstatt auf 0.</p></dd>

  <dt>Heuhaufen</dt>
  <dd><p>Der String, dessen Inhalt durchsucht wird.</p></dd>

  <dt>NadelRegEx</dt>
  <dd><p>Das zu suchende Muster, welches ein Perl-kompatibler regulärer Ausdruck (PCRE) ist. Die <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> des Ausdrucks (falls vorhanden) müssen am Anfang des Strings stehen, gefolgt von einer schließenden Klammer. Zum Beispiel wird mit dem Ausdruck "<span class="red">i)</span>abc.*123" die Unterscheidung von Groß- und Kleinschreibung deaktiviert und "abc" gesucht, gefolgt von null oder mehr beliebige Zeichen, gefolgt von "123". Wenn keine Optionen vorhanden sind, ist das ")" optional; zum Beispiel ist ")abc" das gleiche wie "abc".</p></dd>

  <dt>AusgabeVar</dt>
  <dd>
      <p><em>OutputVar</em> is the unquoted name of a variable in which to store a <a href="#MatchObject">match object</a>, which can be used to retrieve the position, length and value of the overall match and of each <a href="../misc/RegEx-QuickRef.htm#subpat">captured subpattern</a>, if any are present.</p>
      <p>If the pattern is not found (that is, if the function returns 0), this variable is made blank.</p>
      
    </dd>

  <dt>Startposition</dt>
  <dd><p>Ist <em>Startposition</em> nicht vorhanden, wird standardmäßig eine 1 verwendet (der Anfang von <em>Heuhaufen</em>). Ansonsten beginnt die Suche mit einer 2 beim zweiten Zeichen, mit einer 3 beim dritten Zeichen und so weiter. Wenn <em>Startposition</em> die Länge von <em>Heuhaufen</em> überschreitet, beginnt die Suche bei einem leeren String am Ende des <em>Heuhaufens</em> (das natürlich zur Folge hat, dass keine Übereinstimmung gefunden wird).</p>
      <p>If <em>StartingPosition</em> is negative, it is considered to be an offset from the end of <em>Haystack</em>. For example, -1 starts at the last character and -2 starts at the next-to-last character. Wenn <em>Startposition</em> das linke Ende des <em>Heuhaufens</em> überschreitet, wird alles vom <em>Heuhaufen</em> durchsucht.</p>
      <p>Unabhängig von <em>Startposition</em> bezieht sich der Rückgabewert immer auf das erste Zeichen des <em>Heuhaufens</em>. Zum Beispiel wäre die Position von "abc" in "123abc789" immer 4.</p>    </dd>

</dl>

<h3 id="ErrorLevel">ErrorLevel</h3>
<p>This function is able to throw an exception on failure (not to be confused with "no match found"). For more information, see <a href="Catch.htm#RuntimeErrors">Runtime Errors</a>.</p>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> kann Folgendes enthalten:</p>
<ul>
  <li>Eine 0 - das heißt, dass keine Fehler aufgetreten sind.</li>
  <li>Einen String in folgender Form: <em>Compile error N at offset M: Beschreibung</em>. In diesem String ist <em>N</em> die PCRE-Fehlernummer, <em>M</em> die Position des betroffenen Zeichens innerhalb des regulären Ausdrucks und <em>Beschreibung</em> ein Text, der den Fehler beschreibt.</li>
  <li>Eine negative Zahl - das heißt, dass ein Fehler beim <em>Ausführen</em> des regulären Ausdrucks aufgetreten ist. Obwohl solche Fehler selten sind, sind die am häufigsten auftretenden Fehler "zu viele mögliche Übereinstimmungen mit leeren Strings" (-22), "Rekursion zu tief" (-21) und "Limit der Übereinstimmung erreicht" (-8). In so einem Fall sollte das Muster restriktiver gemacht werden. Zum Beispiel kann je nach Möglichkeit das Sternchen (*) mit einem Fragezeichen (?), Pluszeichen (+) oder einer Begrenzung wie {0,3} ersetzen werden.</li>
</ul>

<h3>Optionen</h3>
<p>Siehe <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> für Modifikatoren wie "<span class="red">i)</span>abc", die die Unterscheidung von Groß- und Kleinschreibung im Muster "abc" deaktiviert.</p>

<h3 id="MatchObject">Match Object</h3>
<p>If a match is found, an object containing information about the match is stored in <em>OutputVar</em>. Dieses Objekt hat folgende Eigenschaften:</p>
<p><strong>Match.Pos(N)</strong>: Gibt die Position der gesamten Übereinstimmung oder eines Teilausdrucks zurück.</p>
<p><strong>Match.Len(N)</strong>: Gibt die Länge der gesamten Übereinstimmung oder eines Teilausdrucks zurück.</p>
<p><strong>Match.Value(N)</strong>: Gibt die gesamte Übereinstimmung oder ein Teilausdruck zurück.</p>
<p><strong>Match.Name(N)</strong>: Gibt den Namen eines benannten Teilausdrucks zurück, falls vorhanden.</p>
<p><strong>Match.Count()</strong>: Gibt die Gesamtanzahl an Teilausdrücken zurück.</p>
<p><strong>Match.Mark()</strong>: Gibt <em>NAME</em> des zuletzt gefundenen Teilausdrucks <code>(*MARK:NAME)</code> zurück, falls vorhanden.</p>
<p><strong>Match[N]</strong>: Wenn <em>N</em> eine 0 oder Nummer/Name eines gültigen Teilausdrucks ist, dann ist diese Schreibweise mit <code>Match.Value(N)</code> vergleichbar. Ansonsten kann <em>N</em> der Name einer der oben genannten Eigenschaften sein. Zum Beispiel sind <code>Match["Pos"]</code> und <code>Match.Pos</code> das gleiche wie <code>Match.Pos()</code>, sofern es keinen Teilausdruck mit dem Namen "Pos" gibt, denn sonst würden sie das gleiche wie <code>Match.Value("Pos")</code> sein.</p>
<p><strong>Match.N</strong>: Das Gleiche wie oben, nur dass <em>N</em> eine Zahl oder ein Name ohne Anführungszeichen ist.</p>
<p>Bei allen oben genannten Eigenschaften kann <em>N</em> Folgendes sein:</p>
<ul>
  <li>0 für die gesamte Übereinstimmung.</li>
  <li>Die Nummer eines Teilausdrucks, auch einen mit Namen.</li>
  <li>Der Name eines Teilausdrucks.</li>
</ul>
<p>Es können eckige Klammern anstelle von runden Klammern verwendet werden, wenn <em>N</em> angegeben wurde.</p>
<p>The object does not support enumeration; that is, the <a href="For.htm">for-loop</a> is not supported. Instead, use <code><a href="Loop.htm">Loop</a> Match.Count()</code>.</p>

<h3>Performance</h3>
<p>Um einen einfachen Teilstring innerhalb eines größeren Strings zu suchen, ist es besser, <a href="../Functions.htm#InStr">InStr()</a> zu benutzen, weil es schneller als RegExMatch() ist.</p>
<p>Zur Verbesserung der Performance werden die 100 aktuellsten regulären Ausdrücke im Speicher zwischengespeichert (in kompilierter Form).</p>
<p>Die <a href="../misc/RegEx-QuickRef.htm#Study">S-Option</a> kann mitunter dabei helfen, die Performance eines häufig benutzten regulären Ausdrucks zu verbessern (z. B. in einer Schleife).</p>

<h3>Bemerkungen</h3>
<p><a name="NamedSubPat"></a>Es ist möglich, einen Teilausdruck zu benennen, wie z. B. das Wort <em>Jahr</em> im Ausdruck "(?P&lt;Jahr&gt;\d{4})". Solche Namen können maximal 32 Zeichen lang sein. Zudem sind nur alphanumerische Zeichen und Unterstriche erlaubt. Note that named subpatterns are also numbered, so if an <a href="../misc/RegEx-QuickRef.htm#subpat">unnamed subpattern</a> occurs after "Year", it would be stored in <code>OutputVar[2]</code>, not <code>OutputVar[1]</code>.</p>
<p>Innerhalb eines regulären Ausdrucks können bestimmte Sonderzeichen wie Tabulatorzeichen und Zeilenumbrüche sowohl mit einem Akzent- (`) als auch mit einem Backslash-Zeichen (\) escaped werden. Zum Beispiel ist `t das gleiche wie \t, sofern die <b>x</b>-Option nicht verwendet wird.</p>
<p>Um die Grundlagen von regulären Ausdrücken kennenzulernen (oder das Gedächtnis ein wenig aufzufrischen), siehe <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>.</p>
<p>AutoHotkey's reguläre Ausdrücke wurden mittels Perl-kompatible reguläre Ausdrücke (PCRE) von <a href="http://www.pcre.org/">www.pcre.org</a> implementiert.</p>

<h3>Siehe auch</h3>
<p><a href="RegExReplace.htm">RegExReplace()</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx Quick Reference</a>, <a href="../misc/RegExCallout.htm">Regular Expression Callouts</a>, <a href="../Functions.htm#InStr">InStr()</a>, <a href="../Functions.htm#SubStr">SubStr()</a>, <a href="SetTitleMatchMode.htm#RegEx">SetTitleMatchMode RegEx</a>, <a href="http://www.autohotkey.com/forum/topic16164.html">Global matching and Grep (forum link)</a></p>
<p>Häufige Quellen von Textdaten: <a href="FileRead.htm">FileRead</a>, <a href="Download.htm">Download</a>, <a href="../misc/Clipboard.htm">Clipboard</a>, <a href="GuiControls.htm#Edit">GUI Edit controls</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent">FoundPos := RegExMatch("xxxabc123xyz", "abc.*xyz")  <em>; Returns 4, which is the position where the match was found.</em>
FoundPos := RegExMatch("abc123123", "123$")  <em>; Returns 7 because the $ requires the match to be at the end.</em>
FoundPos := RegExMatch("abc123", "i)^ABC")  <em>; Returns 1 because a match was achieved via the case-insensitive option.</em>
FoundPos := RegExMatch("abcXYZ123", "abc(.*)123", SubPat)  <em>; Returns 1 and stores "XYZ" in SubPat[1].</em>
FoundPos := RegExMatch("abc123abc456", "abc\d+", "", 2)  <em>; Returns 7 instead of 1 due to StartingPosition 2 vs. 1.</em>

<em>; For general RegEx examples, see the <a href="../misc/RegEx-QuickRef.htm">RegEx Quick Reference</a>.</em></pre>

</body>
</html>
