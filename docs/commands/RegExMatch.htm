<!DOCTYPE HTML>
<html>
<head>
<title>RegExMatch</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="robots" content="noindex, nofollow">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/jquery.js" type="text/javascript"></script>
<script src="../static/tree.jquery.js" type="text/javascript"></script>
<script src="../static/ga.js" type="text/javascript"></script>
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>RegExMatch()</h1>

<p>Überprüft, ob ein Muster (regulärer Ausdruck) im String vorkommt.</p>

<pre class="Syntax">Fundposition := RegExMatch(Heuhaufen, NadelRegEx [, AusgabeVar, Startposition = 1])</pre>
<h3>Parameter</h3>
<dl>

  <dt>Fundposition</dt>
  <dd><p>RegExMatch() gibt die Position von <em>NadelRegEx</em> zurück, das ganz links im <em>Heuhaufen</em>-String vorkommt. Position 1 ist das erste Zeichen. Eine 0 wird zurückgegeben, wenn der Ausdruck nicht gefunden wird. Falls ein Fehler bei der PCRE-Ausführung auftritt, wird ein leerer String zurückgegeben und ErrorLevel auf einen der <a href="#ErrorLevel">unteren Werte</a> gesetzt, anstatt auf 0.</p></dd>

  <dt>Heuhaufen</dt>
  <dd><p>Ein String, dessen Inhalt durchsucht werden soll.</p></dd>

  <dt>NadelRegEx</dt>
  <dd><p>Ein Muster im PCRE-Format (Perl-kompatibler regulärer Ausdruck), das gesucht werden soll. Die <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> des Musters (falls vorhanden) müssen am Anfang des Strings eingefügt werden, gefolgt von einer schließenden Klammer. Zum Beispiel würde das Muster "<span class="red">i)</span>abc.*123" die Option "zeichenungenau" einschalten und nach "abc" suchen, gefolgt von 0 oder mehreren Vorkommen eines beliebigen Zeichens, gefolgt von "123". Wenn es keine Optionen gibt, ist das ")" optional; zum Beispiel wäre ")abc" das gleiche wie "abc".</p></dd>

  <dt>AusgabeVar</dt>
  <dd>
      <p><em>AusgabeVar</em> ist der Name einer Variable ohne Anführungszeichen, in der ein <a href="#MatchObject">Match-Objekt</a> gespeichert wird. Mit diesem Objekt kann Position, Länge und Wert der gesamten Übereinstimmung sowie von jedem <a href="../misc/RegEx-QuickRef.htm#subpat">erfassenden Teilmuster</a> abgerufen werden, sofern vorhanden.</p>
      <p>Wenn das Muster nicht gefunden werden kann (also wenn die Funktion 0 zurückgibt), wird diese Variable leer gemacht.</p>
      
    </dd>

  <dt>Startposition</dt>
  <dd><p>Fehlt <em>Startposition</em>, gilt standardmäßig 1 (das erste Zeichen von <em>Heuhaufen</em>). Ansonsten kann eine 2 angegeben werden, um beim zweiten Zeichen zu beginnen, eine 3, um beim dritten Zeichen zu beginnen, und so weiter. Wenn <em>Startposition</em> die Länge von <em>Heuhaufen</em> überschreitet, beginnt die Suche bei einem leeren String am <em>Heuhaufen</em>-Ende (wodurch keine Übereinstimmung gefunden werden kann).</p>
      <p>Wenn <em>Startposition</em> negativ ist, gilt sie als Offset vom <em>Heuhaufen</em>-Ende. Zum Beispiel würde -1 beim letzten Zeichen und -2 beim vorletzten Zeichen beginnen. Wenn <em>Startposition</em> das linke <em>Heuhaufen</em>-Ende überschreiten will, wird der gesamte <em>Heuhaufen</em> durchsucht.</p>
      <p>Egal welchen Wert man als <em>Startposition</em> verwendet - der Rückgabewert ist immer relativ zum ersten <em>Heuhaufen</em>-Zeichen. Zum Beispiel wäre die Position von "abc" in "123abc789" immer 4.</p></dd>

</dl>

<h3 id="ErrorLevel">Fehler</h3>
<p>Enthält das Muster einen Syntaxfehler, wird eine <a href="Catch.htm#RuntimeErrors">Ausnahme</a> ausgelöst, mit einer Nachricht in folgender Form: <em>Compile error N at offset M: Beschreibung</em>. In diesem String ist <em>N</em> die PCRE-Fehlernummer, <em>M</em> die Position des betroffenen Zeichens innerhalb des regulären Ausdrucks und <em>Beschreibung</em> ein Text, der den Fehler beschreibt.</p>
<p>Ansonsten wird <a href="../misc/ErrorLevel.htm">ErrorLevel</a> auf eines der folgenden Werte gesetzt:</p>
<ul>
  <li>Eine 0 - das heißt, dass keine Fehler aufgetreten sind.</li>
  <li>Eine negative Zahl - das heißt, dass ein Fehler beim <em>Ausführen</em> des regulären Ausdrucks aufgetreten ist. Zwar kommen solche Fehler selten vor, allerdings sind die am häufigsten auftretenden Fehler "zu viele mögliche Übereinstimmungen mit leeren Strings" (-22), "Rekursion zu tief" (-21) und "Limit der Übereinstimmung erreicht" (-8). Wenn dies geschieht, solltest du versuchen, das Muster restriktiver zu machen - ersetze zum Beispiel jedes * mit einem ?, + oder einem Limit wie {0,3}, sofern es möglich ist.</li>
</ul>

<h3>Optionen</h3>
<p>Unter den <a href="../misc/RegEx-QuickRef.htm#Options">Optionen</a> findest du Modifikatoren wie z. B. "<span class="red">i)</span>abc", der die Zeichengenauigkeit im Muster "abc" ausschalten würde.</p>

<h3 id="MatchObject">Match-Objekt</h3>
<p>Wenn eine Übereinstimmung gefunden wird, wird ein Objekt mit Informationen über die Übereinstimmung in <em>AusgabeVar</em>gespeichert. Dieses Objekt hat die folgenden Eigenschaften:</p>
<p><strong>Match.Pos(N)</strong>: Gibt die Position der gesamten Übereinstimmung oder eines erfassenden Teilmusters zurück.</p>
<p><strong>Match.Len(N)</strong>: Gibt die Länge der gesamten Übereinstimmung oder eines erfassenden Teilmusters zurück.</p>
<p><strong>Match.Value(N)</strong>: Gibt die gesamte Übereinstimmung oder einen erfassenden Teilmuster zurück.</p>
<p><strong>Match.Name(N)</strong>: Gibt den Namen eines Teilmusters zurück, sofern es einen hat.</p>
<p><strong>Match.Count()</strong>: Gibt die Anzahl von allen Teilmustern zurück.</p>
<p><strong>Match.Mark()</strong>: Gibt den <em>NAMEN</em> des zuletzt gefundenen <code>(*MARK:NAMEN)</code> zurück, sofern zutreffend.</p>
<p><strong>Match[N]</strong>: Wenn <em>N</em> eine 0 oder Nummer/Name eines gültigen Teilmusters ist, dann ist dies das gleiche wie <code>Match.Value(N)</code>. Ansonsten kann <em>N</em> der Name von einer der oben genannten Eigenschaften sein. Zum Beispiel wären <code>Match["Pos"]</code> und <code>Match.Pos</code> das gleiche wie <code>Match.Pos()</code>; existiert aber ein Teilmuster namens "Pos", wären sie das gleiche wie <code>Match.Value("Pos")</code>.</p>
<p><strong>Match.N</strong>: Das gleiche wie oben, außer dass <em>N</em> ein Name ohne Anführungszeichen oder eine Zahl ist.</p>
<p>Bei allen oben genannten Eigenschaften kann <em>N</em> folgendes sein:</p>
<ul>
  <li>0 für die gesamte Übereinstimmung.</li>
  <li>Die Nummer eines Teilmusters, sowie auch von einem, das einen Namen hat.</li>
  <li>Der Name eines Teilmusters.</li>
</ul>
<p>Eckige Klammern können anstelle von runden Klammern verwendet werden, wenn <em>N</em> angegeben wurde.</p>
<p>Das Objekt unterstützt keine Enumeration; das heißt, die <a href="For.htm">For-Schleife</a> wird nicht unterstützt. Verwende stattdessen <code><a href="Loop.htm">Loop</a> Match.Count()</code>.</p>

<h3>Performance</h3>
<p>Um einen einfachen Teilstring innerhalb eines größeren Strings zu suchen, solltest du <a href="../Functions.htm#InStr">InStr()</a> benutzen, weil es schneller als RegExMatch() ist.</p>
<p>Um die Performance zu verbessern, werden die 100 zuletzt verwendeten regulären Ausdrücke zwischengespeichert (in kompilierter Form).</p>
<p>Die <a href="../misc/RegEx-QuickRef.htm#Study">S-Option</a> kann manchmal die Performance eines regulären Ausdrucks verbessern, der häufig verwendet wird (z. B. in einer Schleife).</p>

<h3>Bemerkungen</h3>
<p><a name="NamedSubPat"></a>Man kann einem Teilmuster einen Namen geben, wie z. B. das Wort <em>Jahr</em> in dem Muster "(?P&lt;Jahr&gt;\d{4})". Solche Namen können maximal aus 32 alphanumerischen Zeichen und Unterstriche bestehen. Beachte, dass benannte Teilmuster auch nummeriert sind. Wenn ein <a href="../misc/RegEx-QuickRef.htm#subpat">unbenanntes Teilmuster</a> beispielsweise nach "Jahr" vorkommt, würde es nicht in <code>AusgabeVar[1]</code>, sondern in <code>AusgabeVar[2]</code> gespeichert werden.</p>
<p>Innerhalb eines regulären Ausdrucks kann bei bestimmten Sonderzeichen wie Tab und Newline das verwendete Escapezeichen sowohl ein umgekehrtes Häkchen (`) als auch ein umgekehrter Schrägstrich (\) sein. Zum Beispiel wäre `t das gleiche wie \t, sofern die <b>x</b>-Option nicht verwendet wird.</p>
<p>Um die Grundlagen von regulären Ausdrücken kennenzulernen (oder das Gedächtnis ein wenig aufzufrischen), siehe <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>.</p>
<p>AutoHotkey's reguläre Ausdrücke wurden mittels Perl-kompatible reguläre Ausdrücke (PCRE) von <a href="http://www.pcre.org/">www.pcre.org</a> implementiert.</p>

<h3>Siehe auch</h3>
<p><a href="RegExReplace.htm">RegExReplace()</a>, <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a>, <a href="../misc/RegExCallout.htm">Callouts in regulären Ausdrücken</a>, <a href="../Functions.htm#InStr">InStr()</a>, <a href="../Functions.htm#SubStr">SubStr()</a>, <a href="SetTitleMatchMode.htm#RegEx">SetTitleMatchMode RegEx</a>, <a href="http://www.autohotkey.com/forum/topic16164.html">Global matching and Grep (Forum-Link)</a></p>
<p>Häufige Quellen von Textdaten: <a href="FileRead.htm">FileRead</a>, <a href="Download.htm">Download</a>, <a href="../misc/Clipboard.htm">Clipboard</a>, <a href="GuiControls.htm#Edit">GUI-Edit-Steuerelemente</a></p>

<h3>Beispiele</h3>
<pre class="NoIndent">Fundposition := RegExMatch("xxxabc123xyz", "abc.*xyz")  <em>; Gibt 4 zurück, weil das die Position ist, auf der die Übereinstimmung gefunden wurde.</em>
Fundposition := RegExMatch("abc123123", "123$")  <em>; Gibt 7 zurück, weil durch $ die Übereinstimmung am Ende vorkommen muss.</em>
Fundposition := RegExMatch("abc123", "i)^ABC")  <em>; Gibt 1 zurück, weil eine Übereinstimmung aufgrund der Zeichenungenauigkeits-Option möglich gemacht wurde.</em>
Fundposition := RegExMatch("abcXYZ123", "abc(.*)123", Teilmuster)  <em>; Gibt 1 zurück und speichert "XYZ" in Teilmuster[1].</em>
Fundposition := RegExMatch("abc123abc456", "abc\d+", "", 2)  <em>; Gibt 7 statt 1 zurück, wegen einer 2 als Startposition.</em>

<em>; Allgemeine RegEx-Beispiele können in der <a href="../misc/RegEx-QuickRef.htm">RegEx-Kurzübersicht</a> gefunden werden.</em></pre>

</body>
</html>
